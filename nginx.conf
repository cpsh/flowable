A.安装nginx

使用configure命令，生成一个Makefile文件，再使用make make install完成安装。
支持的参数：
1.--prefix=path
定义一个用于放置服务文件的目录。此目录同样用于所有设置于configure命令和位于nginx.conf配置文件中的相对路径。默认值为/usr/local/nginx
2.--sbin-path=path
设置nginx的可执行文件名，只用于安装过程。默认值时prefix/sbin/nginx
3.--conf-path=path
设置nginx.conf配置文件名。如果有需要，nginx可以用不同的配置文件启动，使用-c file命令即可。默认值为prefix/conf/nginx.conf
4.--pid-path=path
设置nginx.pid文件名，此文件用于存储主进程的进程ID。安装之后，此文件名可以在nginx.conf配置文件中修改,使用pid指令。默认值为prefix/logs/nginx.pid
5.--error-log-path=path
设置主要错误，警告和诊断文件名。可以在nginx.conf中修改,使用error_log指令。默认值为prefix/logs/error.log
6.--http-log-path=path
设置HTTP服务的关键请求日志文件名。可以在nginx.conf中修改，使用access_log指令。默认值为prefix/logs/access.log
7.--user=name
设置未认证用户的证书用于工作进程。可以在nginx.conf中修改，使用user指令。默认值时nobody
8.--group=name
设置用户组的证书用于工作进程。可以在nginx.conf中修改，使用user指令。默认值是一个未认证用户名。
9.--help
打印帮助信息。
10.--modules-path=path
定义一个目录用于安装nginx动态模块，默认值是prefix/modules
11.--lock-path=path
设置锁文件名。可以在nginx.conf中修改，使用lock_file指令。默认值时prefix/logs/nginx.lock。
12.--build=name
设置一个可选的nginx构建文件名
13.--builddir=path
设置一个构建目录
14.--with-select_module --without-select_module
启动或禁用一个用于服务器使用select()方法的模块。如果平台不支持更合适的方法，比如kqueue、epoll、或/dev/poll，则自动构建此模块。
15.--with-poll_module --without-poll_module
启动或禁用一个用于服务器使用poll()方法的模块。如果平台不支持更合适的方法，比如kqueue、epoll、或/dev/poll，则自动构建此模块。
16.--with-threads
启动thread_pools
17.--with-file-aio
启动asynchronous_file_I/O（FreeBSD和Linux）
18.--with-http_ssl_module
启用构建一个模块添加HTTPS协议支持到Http服务器。这个模块默认不构建。需要OpenSSL库用于构建和运行此模块。
19.--with-http_v2_module
启用构建一个模块提供HTTP/2支持。默认不构建。
20.--with-http_realip_module
启用构建ngx_http_realip_module，改变客户端地址为请求头中定义的。默认不构建。
21.--with-http_addition_module
启用构建ngx_http_addition_module模块，用于在一个响应前后添加文本。默认不构建。
22.--with-http_xslt_module --with-http_xslt_module=dynamic
启用构建ngx_http_xslt_module模块，用于使用一个或多个XSLT样式表改变XML响应。默认不构建。依赖于libxml2和libxslt库。
23.--with-http_image_filter_module --with-http_image_filter_module=dynamic
启用构建ngx_http_image_filter_module模块，用于改变图片在JPEF、GIF、PNG和WebP格式。默认不构建
24.--with-http_geoip_module --with-http_geoip_module=dynamic
启用构建ngx_http_geoip_module模块，用于创建变量，依赖于客户端IP地址和预编译的MaxMind数据库。默认不构建
25.--with-http_sub_module
启用构建ngx_http_sub_module模块，用于通过指定string替换为另一个来修改响应。默认不构建。
26.--with-http_dav_module
启用构建ngx_http_dav_module模块，通过WebDAV协议提供文件管理自动化。默认不构建。
27.--with-http_flv_module
启用构建ngx_http_flv_module模块，为Flash视频（FLV）文件提供伪流服务器端支持。默认不构建。
28.--with-http_mp4_module
启用构建ngx_http_mp4_module模块，为MP4文件提供伪流服务器端支持。默认不构建。
29.--with-http_gunzip_module
启用构建ngx_http_gunzip_mdule模块，使用Content-Encoding:gzip为不支持gizp编码方式的客户端解压响应。默认不构建。
30.--with-http_gzip_static_module
启用构建ngx_http_gzip_static_module模块，允许发送使用".gz"文件扩展名的预压缩文件，而不是常规文件。默认不构建。
31.--with-http_auth_request_module
启用构建ngx_http_auth_request_module模块，其余子请求的结果继承客户端的授权信息。默认不构建
32.--with-http_random_index_module
启用构建ngx_http_random_index_module模块，处理以斜线"/"结尾的请求，并且在目录中选择一个随机的文件作为索引文件。默认不构建。
33.--with-http_secure_link_module
启用构建ngx_http_secure_module模块。默认不构建。
34.--with-http_degradation_module (degradation 恶化 堕落)
启用构建ngx_http_degradation_module模块。默认不构建。
35.--with-http_slice_module
启用构建ngx_http_slice_module模块，将请求拆分为多个子请求，每个请求返回一定范围的响应。提供了更有效的大型响应缓存。默认不构建。
36.--with-http_stub_status_module
启用构建ngx_http_stub_status_module模块，提供对基础状态信息的访问。默认不构建。
37.--without-http_charset_module
禁用构建ngx_http_charset_module模块，增加指定的字符集到Content-Type响应头字段，还可以将数据从一个字符集转换到另一个字符集。
38.--without-http_gzip_module
禁用构建压缩HTTP服务的响应模块，依赖于zlib库。
39.--without-http_ssi_module
禁用构建ngx_http_ssi_module,处理在响应中的SSI（服务器端包含）命令。
40.--without-http_userid_module
禁用ngx_http_userid_module模块，设置合适于客户端标识的cookie
41.--without-http_access_module
禁用ngx_http_access_module，允许限制的访问某些客户端地址。
42.--without-http_auth_basic_module
禁用构建ngx_http_auth_basic_module,通过验证用户名和密码，使用HTTP Basic认证，允许限制的访问资源
43.--without-http_mirror_module
禁用构建ngx_http_mirror_module，通过创建后台镜像子请求实现对原始请求的镜像操作。
44.--without-http_autoindex_module
禁用构建ngx_http_autoindex_module，处理以'/'结尾的请求，并在ngx_http_index_module模块不能找到一个index文件时，产生一个目录。
45.--without-http_geo_module
禁用构建ngx_http_geo_module，使用依赖客户端IP地址的数值产生变量。
46.--without-http_map_module
禁用构建ngx_http_map_module,使用依赖于其他变量的数值产生变量
47.--without-http_split_clients_module
禁用构建ngx_http_split_clients_module，产生变量用于A/B测试
48.--without-http_referer_module
禁用构建ngx_http_referer_module,可以阻止Referer头字段中值无效的请求的访问。
49.--without-http_rewrite_module
禁用构建ngx_http_rewrite_module,允许HTTP服务器重定向请求和改变一个请求的URI，依赖于PCRE库。
50.--without-http_proxy_module
禁用构建HTTP服务器代理模块
51.--without-http_fastcgi_module
放行请求到FastCGI服务器。
52.--without-http_uwsgi_module
放行请求到uwsgi服务器
53.--without-http_scgi_module
放行请求到SCGI服务器
54.--without-http_grpc_module
放行请求到gRPC服务器
55.--without-http_memcached_module
从memcached服务器获取响应
56.--without-http_limit_conn_module
限制每个键的连接数，比如，从同一个IP地址的连接数
57.--without-http_limit_req_module
限制每个键的请求处理速率，例如来自单个IP地址的请求处理速率
58.--without-http_empty_gif_module
禁用构建释放单像素透明GIF的模块
59.--without-http_browser_module
产生变量的数值依赖于User-Agent请求头属性的数值
60.--without-http_upstream_hash_module
实现散列负载平衡方法
61.--without-http_upstream_ip_hash_module
实现ip散列负载平衡方法
62.--without-http_upstream_least_conn_module
实现最少连接的负载平衡方法
63.--without-http_upstream_keepalive_module
提供连接缓存到流服务器
64.--without-http_upstream_zone_module
使存储一个流用户组运行时状态在一个共享内存区域成为可行
65.--with-http_perl_module --with-http_perl_module=dynamic
支持构建嵌入式Perl模块，默认不构建。
66.--with-perl_modules_path=path
定义一个目录用于放置Perl模块
67.--with-perl=path
设置Perl二进制名称
68.--http-client-body-temp-path=path
定义一个目录用于存储保持客户端请求体的临时文件。安装后可在nginx.conf中修改，使用client_body_temp_path指令。默认值时prefix/client_body_temp
69.--http-proxy-temp-path=path
定义一个目录用于存储从代理服务器接受的数据的临时文件。安装后可在nginx.conf中修改，使用proxy_temp_path指令，默认值时prefix/proxy_temp
70.--http-fastcgi-temp-path=path
定义一个目录用于存储从FastCGI服务器接受的数据的临时文件。安装后可在nginx.conf中修改，使用fastcgi_temp_path指令，默认值时prefix/fastcgi_temp
71.--http-uwsgi-temp-path=path
定义一个目录用于存储从uwsgi服务器接受的数据的临时文件。安装后可在nginx.conf中修改，使用uwsgi_temp_path指令，默认值时prefix/uwsgi_temp
72.--without-http
禁用HTTP服务器
73.--without-http-cache
禁用HTTP缓存
74.--with-mail --with-mail=dynamic
启用POP3/IMAP4/SMTP邮件代理服务器
75.--with-mail_ssl_module
启用构建添加SSL/TLS协议支持到邮件代理服务器。默认不构建，依赖于SSL库
76.--without-mail_pop3_module
禁用POP3协议
77.--without-mail_imap_module
禁用IMAP协议
78.--without-mail_smtp_module
禁用SMTP协议
79.--with-stream --with-stream=dynamic
启用构建stream_module，为通用TCP/UDP代理和负载均衡。默认不构建。
80.--with-stream_ssl_module
添加SSL/TLS协议支持到stream模块，默认不构建，依赖于OpenSSL
81.--with-stream_realip_module
改变客户端地址到在代理协议头中发送的地址，默认不构建。
82.--with-stream_geoip_module --with-stream_geoip_module=dynamic
83.--with-stream_ssl_preread_module
84.--without-stream_limit_conn_module
85.--without-stream_access_module
86.--without-stream_geo_module
87.--without-stream_map_module
88.--without-stream_split_clients_modules
89.--without-stream_return_module
90.--without-stream_upstream_hash_module
91.--without-stream_upstream_least_conn_module
92.--without-stream_upstream_zone_module
93.--with-google-perftools_module
支持使用谷歌性能工具对nginx worker进程进行分析。这个模块时为nginx开发人员设计的。默认不构建。
94.--with_cpp_test_module
启用构建ngx_cpp_test_module模块
95.--add-module=path
支持外部模块
96.--add-dynamic-module=path
支持外部动态模块
97.--with-compat
支持动态模块兼容性
98.--with-cc=path
设置C编译器名称
99.--with-cpp=path
设置C预处理器名称
100.--with-cc-opt=parameter
101.--with-ld-opt=paramter
102.--with-cpu-opt=cpu
103.--without-pcre
104.--with-pcre
105.--with-pcre=path
106.--with-pcre-opt=parameters
107.--with-pcre-jit
108.--with-zlib=path
109.--with-zlib-opt=parameters
110.--with-zlib-asm=cpu
111.--with-libatomic
112.--with-libatomic=path
113.--with-openssl=path
114.--with-openssl-opt=parameters
115.--with-debug
实例
./configuration
    --sbin-path=/usr/local/nginx/nginx
    --conf-path=/usr/local/nginx/nginx.conf
    --pid-path=/usr/local/nginx/nginx.pid
    --with-http_ssl_module
    --with-pcre=../pcre-8.41
    --with-zlib=../zlib-1.2.11
make make install


B.开始
nginx有一个主进程和数个工作进程。主进程的主要目的是读取和评价配置文件，和保持工作进程。工作进程真正处理请求。nginx使用基于事件的模型和操作系统相关的机制来有效地在工作进程之间分配请求。工作进程的数量在配置文件中定义，可以针对给定的配置进行设置，也可以根据可用CPU内核的数量自动调整。
nginx和它的各个模块工作方式是在配置文件中确定的。默认，配置文件命名为nginx.conf,并被放置在/usr/local/nginx/conf,/etc/nginx或是/usr/local/etc/nginx中

1.Starting,Stopping 和 reloading配置
为了启动nginx，运行可执行文件/sbin/nginx。一旦启动，可以使用-s参数
stop -- 快速终止
quit -- 优雅终止
reload -- 重新加载配置文件
reopen -- 重新打开日志文件

./nginx -s stop 停止nginx进程直到工作进程完成当前请求的服务，这个命令应该被启动nginx的用户执行

配置文件中做出的修改不会被接受直到reload命令
一旦主进程接受到reload信号，它检查新配置文件的语法有效性，并尝试接受新的配置。如果成功，主进程启动新的工作进程并发送消息到旧的工作进程，要求他们停止。另外，主进程回滚改变并继续使用旧的配置工作。旧的工作进程接受命令去停止，停止接受新的连接并继续服务当前请求直到所有这些请求服务完成。然后，旧工作进程结束。