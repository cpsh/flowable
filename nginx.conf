A.安装nginx

使用configure命令，生成一个Makefile文件，再使用make make install完成安装。
支持的参数：
1.--prefix=path
定义一个用于放置服务文件的目录。此目录同样用于所有设置于configure命令和位于nginx.conf配置文件中的相对路径。默认值为/usr/local/nginx
2.--sbin-path=path
设置nginx的可执行文件名，只用于安装过程。默认值时prefix/sbin/nginx
3.--conf-path=path
设置nginx.conf配置文件名。如果有需要，nginx可以用不同的配置文件启动，使用-c file命令即可。默认值为prefix/conf/nginx.conf
4.--pid-path=path
设置nginx.pid文件名，此文件用于存储主进程的进程ID。安装之后，此文件名可以在nginx.conf配置文件中修改,使用pid指令。默认值为prefix/logs/nginx.pid
5.--error-log-path=path
设置主要错误，警告和诊断文件名。可以在nginx.conf中修改,使用error_log指令。默认值为prefix/logs/error.log
6.--http-log-path=path
设置HTTP服务的关键请求日志文件名。可以在nginx.conf中修改，使用access_log指令。默认值为prefix/logs/access.log
7.--user=name
设置未认证用户的证书用于工作进程。可以在nginx.conf中修改，使用user指令。默认值时nobody
8.--group=name
设置用户组的证书用于工作进程。可以在nginx.conf中修改，使用user指令。默认值是一个未认证用户名。
9.--help
打印帮助信息。
10.--modules-path=path
定义一个目录用于安装nginx动态模块，默认值是prefix/modules
11.--lock-path=path
设置锁文件名。可以在nginx.conf中修改，使用lock_file指令。默认值时prefix/logs/nginx.lock。
12.--build=name
设置一个可选的nginx构建文件名
13.--builddir=path
设置一个构建目录
14.--with-select_module --without-select_module
启动或禁用一个用于服务器使用select()方法的模块。如果平台不支持更合适的方法，比如kqueue、epoll、或/dev/poll，则自动构建此模块。
15.--with-poll_module --without-poll_module
启动或禁用一个用于服务器使用poll()方法的模块。如果平台不支持更合适的方法，比如kqueue、epoll、或/dev/poll，则自动构建此模块。
16.--with-threads
启动thread_pools
17.--with-file-aio
启动asynchronous_file_I/O（FreeBSD和Linux）
18.--with-http_ssl_module
启用构建一个模块添加HTTPS协议支持到Http服务器。这个模块默认不构建。需要OpenSSL库用于构建和运行此模块。
19.--with-http_v2_module
启用构建一个模块提供HTTP/2支持。默认不构建。
20.--with-http_realip_module
启用构建ngx_http_realip_module，改变客户端地址为请求头中定义的。默认不构建。
21.--with-http_addition_module
启用构建ngx_http_addition_module模块，用于在一个响应前后添加文本。默认不构建。
22.--with-http_xslt_module --with-http_xslt_module=dynamic
启用构建ngx_http_xslt_module模块，用于使用一个或多个XSLT样式表改变XML响应。默认不构建。依赖于libxml2和libxslt库。
23.--with-http_image_filter_module --with-http_image_filter_module=dynamic
启用构建ngx_http_image_filter_module模块，用于改变图片在JPEF、GIF、PNG和WebP格式。默认不构建
24.--with-http_geoip_module --with-http_geoip_module=dynamic
启用构建ngx_http_geoip_module模块，用于创建变量，依赖于客户端IP地址和预编译的MaxMind数据库。默认不构建
25.--with-http_sub_module
启用构建ngx_http_sub_module模块，用于通过指定string替换为另一个来修改响应。默认不构建。
26.--with-http_dav_module
启用构建ngx_http_dav_module模块，通过WebDAV协议提供文件管理自动化。默认不构建。
27.--with-http_flv_module
启用构建ngx_http_flv_module模块，为Flash视频（FLV）文件提供伪流服务器端支持。默认不构建。
28.--with-http_mp4_module
启用构建ngx_http_mp4_module模块，为MP4文件提供伪流服务器端支持。默认不构建。
29.--with-http_gunzip_module
启用构建ngx_http_gunzip_mdule模块，使用Content-Encoding:gzip为不支持gizp编码方式的客户端解压响应。默认不构建。
30.--with-http_gzip_static_module
启用构建ngx_http_gzip_static_module模块，允许发送使用".gz"文件扩展名的预压缩文件，而不是常规文件。默认不构建。
31.--with-http_auth_request_module
启用构建ngx_http_auth_request_module模块，其余子请求的结果继承客户端的授权信息。默认不构建
32.--with-http_random_index_module
启用构建ngx_http_random_index_module模块，处理以斜线"/"结尾的请求，并且在目录中选择一个随机的文件作为索引文件。默认不构建。
33.--with-http_secure_link_module
启用构建ngx_http_secure_module模块。默认不构建。
34.--with-http_degradation_module (degradation 恶化 堕落)
启用构建ngx_http_degradation_module模块。默认不构建。
35.--with-http_slice_module
启用构建ngx_http_slice_module模块，将请求拆分为多个子请求，每个请求返回一定范围的响应。提供了更有效的大型响应缓存。默认不构建。
36.--with-http_stub_status_module
启用构建ngx_http_stub_status_module模块，提供对基础状态信息的访问。默认不构建。
37.--without-http_charset_module
禁用构建ngx_http_charset_module模块，增加指定的字符集到Content-Type响应头字段，还可以将数据从一个字符集转换到另一个字符集。
38.--without-http_gzip_module
禁用构建压缩HTTP服务的响应模块，依赖于zlib库。
39.--without-http_ssi_module
禁用构建ngx_http_ssi_module,处理在响应中的SSI（服务器端包含）命令。
40.--without-http_userid_module
禁用ngx_http_userid_module模块，设置合适于客户端标识的cookie
41.--without-http_access_module
禁用ngx_http_access_module，允许限制的访问某些客户端地址。
42.--without-http_auth_basic_module
禁用构建ngx_http_auth_basic_module,通过验证用户名和密码，使用HTTP Basic认证，允许限制的访问资源
43.--without-http_mirror_module
禁用构建ngx_http_mirror_module，通过创建后台镜像子请求实现对原始请求的镜像操作。
44.--without-http_autoindex_module
禁用构建ngx_http_autoindex_module，处理以'/'结尾的请求，并在ngx_http_index_module模块不能找到一个index文件时，产生一个目录。
45.--without-http_geo_module
禁用构建ngx_http_geo_module，使用依赖客户端IP地址的数值产生变量。
46.--without-http_map_module
禁用构建ngx_http_map_module,使用依赖于其他变量的数值产生变量
47.--without-http_split_clients_module
禁用构建ngx_http_split_clients_module，产生变量用于A/B测试
48.--without-http_referer_module
禁用构建ngx_http_referer_module,可以阻止Referer头字段中值无效的请求的访问。
49.--without-http_rewrite_module
禁用构建ngx_http_rewrite_module,允许HTTP服务器重定向请求和改变一个请求的URI，依赖于PCRE库。
50.--without-http_proxy_module
禁用构建HTTP服务器代理模块
51.--without-http_fastcgi_module
放行请求到FastCGI服务器。
52.--without-http_uwsgi_module
放行请求到uwsgi服务器
53.--without-http_scgi_module
放行请求到SCGI服务器
54.--without-http_grpc_module
放行请求到gRPC服务器
55.--without-http_memcached_module
从memcached服务器获取响应
56.--without-http_limit_conn_module
限制每个键的连接数，比如，从同一个IP地址的连接数
57.--without-http_limit_req_module
限制每个键的请求处理速率，例如来自单个IP地址的请求处理速率
58.--without-http_empty_gif_module
禁用构建释放单像素透明GIF的模块
59.--without-http_browser_module
产生变量的数值依赖于User-Agent请求头属性的数值
60.--without-http_upstream_hash_module
实现散列负载平衡方法
61.--without-http_upstream_ip_hash_module
实现ip散列负载平衡方法
62.--without-http_upstream_least_conn_module
实现最少连接的负载平衡方法
63.--without-http_upstream_keepalive_module
提供连接缓存到流服务器
64.--without-http_upstream_zone_module
使存储一个流用户组运行时状态在一个共享内存区域成为可行
65.--with-http_perl_module --with-http_perl_module=dynamic
支持构建嵌入式Perl模块，默认不构建。
66.--with-perl_modules_path=path
定义一个目录用于放置Perl模块
67.--with-perl=path
设置Perl二进制名称
68.--http-client-body-temp-path=path
定义一个目录用于存储保持客户端请求体的临时文件。安装后可在nginx.conf中修改，使用client_body_temp_path指令。默认值时prefix/client_body_temp
69.--http-proxy-temp-path=path
定义一个目录用于存储从代理服务器接受的数据的临时文件。安装后可在nginx.conf中修改，使用proxy_temp_path指令，默认值时prefix/proxy_temp
70.--http-fastcgi-temp-path=path
定义一个目录用于存储从FastCGI服务器接受的数据的临时文件。安装后可在nginx.conf中修改，使用fastcgi_temp_path指令，默认值时prefix/fastcgi_temp
71.--http-uwsgi-temp-path=path
定义一个目录用于存储从uwsgi服务器接受的数据的临时文件。安装后可在nginx.conf中修改，使用uwsgi_temp_path指令，默认值时prefix/uwsgi_temp
72.--without-http
禁用HTTP服务器
73.--without-http-cache
禁用HTTP缓存
74.--with-mail --with-mail=dynamic
启用POP3/IMAP4/SMTP邮件代理服务器
75.--with-mail_ssl_module
启用构建添加SSL/TLS协议支持到邮件代理服务器。默认不构建，依赖于SSL库
76.--without-mail_pop3_module
禁用POP3协议
77.--without-mail_imap_module
禁用IMAP协议
78.--without-mail_smtp_module
禁用SMTP协议
79.--with-stream --with-stream=dynamic
启用构建stream_module，为通用TCP/UDP代理和负载均衡。默认不构建。
80.--with-stream_ssl_module
添加SSL/TLS协议支持到stream模块，默认不构建，依赖于OpenSSL
81.--with-stream_realip_module
改变客户端地址到在代理协议头中发送的地址，默认不构建。
82.--with-stream_geoip_module --with-stream_geoip_module=dynamic
83.--with-stream_ssl_preread_module
84.--without-stream_limit_conn_module
85.--without-stream_access_module
86.--without-stream_geo_module
87.--without-stream_map_module
88.--without-stream_split_clients_modules
89.--without-stream_return_module
90.--without-stream_upstream_hash_module
91.--without-stream_upstream_least_conn_module
92.--without-stream_upstream_zone_module
93.--with-google-perftools_module
支持使用谷歌性能工具对nginx worker进程进行分析。这个模块时为nginx开发人员设计的。默认不构建。
94.--with_cpp_test_module
启用构建ngx_cpp_test_module模块
95.--add-module=path
支持外部模块
96.--add-dynamic-module=path
支持外部动态模块
97.--with-compat
支持动态模块兼容性
98.--with-cc=path
设置C编译器名称
99.--with-cpp=path
设置C预处理器名称
100.--with-cc-opt=parameter
101.--with-ld-opt=paramter
102.--with-cpu-opt=cpu
103.--without-pcre
104.--with-pcre
105.--with-pcre=path
106.--with-pcre-opt=parameters
107.--with-pcre-jit
108.--with-zlib=path
109.--with-zlib-opt=parameters
110.--with-zlib-asm=cpu
111.--with-libatomic
112.--with-libatomic=path
113.--with-openssl=path
114.--with-openssl-opt=parameters
115.--with-debug
实例
./configuration
    --sbin-path=/usr/local/nginx/nginx
    --conf-path=/usr/local/nginx/nginx.conf
    --pid-path=/usr/local/nginx/nginx.pid
    --with-http_ssl_module
    --with-pcre=../pcre-8.41
    --with-zlib=../zlib-1.2.11
make make install


B.开始
nginx有一个主进程和数个工作进程。主进程的主要目的是读取和评价配置文件，和保持工作进程。工作进程真正处理请求。nginx使用基于事件的模型和操作系统相关的机制来有效地在工作进程之间分配请求。工作进程的数量在配置文件中定义，可以针对给定的配置进行设置，也可以根据可用CPU内核的数量自动调整。
nginx和它的各个模块工作方式是在配置文件中确定的。默认，配置文件命名为nginx.conf,并被放置在/usr/local/nginx/conf,/etc/nginx或是/usr/local/etc/nginx中

1.Starting,Stopping 和 reloading配置
为了启动nginx，运行可执行文件/sbin/nginx。一旦启动，可以使用-s参数
stop -- 快速终止
quit -- 优雅终止
reload -- 重新加载配置文件
reopen -- 重新打开日志文件

./nginx -s stop 停止nginx进程直到工作进程完成当前请求的服务，这个命令应该被启动nginx的用户执行

配置文件中做出的修改不会被接受直到reload命令
一旦主进程接受到reload信号，它检查新配置文件的语法有效性，并尝试接受新的配置。如果成功，主进程启动新的工作进程并发送消息到旧的工作进程，要求他们停止。另外，主进程回滚改变并继续使用旧的配置工作。旧的工作进程接受命令去停止，停止接受新的连接并继续服务当前请求直到所有这些请求服务完成。然后，旧工作进程结束。

也可以在Unix工具的帮助下发送信号到nginx，例如kill。信号直接发送到进程通过一个给定的进程Id。nginx主进程的进程ID被记录在/usr/local/nginx/logs或/var/run的nginx.pid文件中。
kill -s QUIT processId

2.配置文件的结构
nginx由模块组成，由定义在配置文件中的指令控制。指令被分为单指令和块指令。单指令是由空格分开的名称和参数值组成的，由分号;结尾。块指令有相同的结构，但是由{}包括。如果一个块指令有其他内部指令，就被称为上下文。
放置在配置文件中，在任何上下文外部的指令被视为在主上下文中。events和http指令在主上下文中，server在http中，location在server中。

3.提供静态内容
web服务器的一个重要作用是提供文件展示
通常，配置文件应该包含数个server块，通过监听端口和服务名区分。一旦nginx接收到处理请求，会测试定义在请求头中的参数和location指令中的。
location块指定'/'前缀与请求的URI比较。对于匹配的请求，URI将被添加到root指令定义的路径上，以构成本地系统上请求文件的路径。如果有数个匹配的location块，nginx将选择具有最长前缀 的位置。
本地文件路径时 root + location

4.设置简单代理服务器
nginx的一个常见的用处是设置为代理服务器。接受请求，放行至被代理服务器，取回响应，然后送回客户端。
在http中创建一个server
http {
    server { # 基本的被代理服务器
        listen 8080; # 监听8080端口
        root /home/user_dir/data/up1; # 全局的root
        location / { # 匹配的uri

        }
    }
    server { # 基本的代理服务器
        listen 80; # 监听80端口
        location / { #　匹配的uri
            proxy_pass http://location:8080; # 映射的代理服务器地址
        }
        location /image {
            root /home/user_dir/data;
        }
        location ~ \.(gif|png|jpg)$ { # 通配以.gif .png .jpg结尾的uri)
            root /data/images;
        }
    }
}

5.设置FastCGI代理
server {
    location {
        fastcgi_pass location:9000;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param QUERY_STRING $query_string
    }

    location ~ \.(gif|jpg|png)$ {
        root /data/images;
    }
}

C 控制nginx
nginx被信号控制。主进程的进程ID默认被记录在/usr/local/nginx/logs/nginx.pid中。这可以在./configure时修改，也可以在nginx.conf中使用pid指令修改。主进程支持以下信号：
1.TERM,INT  快速终止
2.QUIT  优雅终止
3.HUP   更改配置信息，保持改变时快照（只作用于freeBSD和Linux），使用新的配置信息启动新的工作进程，优雅终止旧的工作进程
4.USR1  重新开启日志文件
5.USR2  升级可执行文件
6.WINCH 优雅终止工作进程

1.改变配置信息
为了让nginx重读配置文件，HUP信息应该被发送到主进程。主进程首先验证文本格式的有效性，然后尝试接受新的配置信息。如果失败，则回滚更改并继续使用旧的工作进程。如果成功则启动新的工作进程，并发送消息到旧的工作进程要求它们优雅终止。旧工作进程关闭监听套接字并继续服务旧的客户端。直到所有客户端服务完成，旧的工作进程终止。
ps -aux | grep nginx 或在 /usr/local/nginx/log/nginx.pid中查看主进程ID
kill -HUP master_process_pid

2.轮换日志文件
为了轮转日志文件，需要先被重命名。直到USR1信号发送至主进程。然后主进程将重新开启所有当前开启的日志文件并分配一个无权限的用户作为拥有者。

3.动态升级可执行文件
为了升级服务器可执行文件，新的可执行文件应该替换旧的。然后USR2信号应该被发送到主进程。主进程首先重命名进程ID文件到.oldbin后缀。例如,/usr/local/nginx/logs/nginx.pid.oldbin,然后启动一个新的可执行文件转而启动新的工作进程
这些操作之后所有工作进程（包括新的和旧的）继续接受请求。如果WINCH信息发送到主进程，它会发送信息到工作进程，要求它们优雅的终止。
一段时间之后，只有信的工作进程会处理请求。

值得注意的是旧的主进程并没有关闭监听套接字，并且如果需要它可被用于再一次启动工作进程。某些情况下新的可执行文件工作不被接受，下列的行为会被执行
1.发送HUP信号到旧的主进程。旧的主进程会启动新的工作进程但是不重读配置信息。然后，所有细腻的工作进程被优雅终止，通过发送QUIT信号到新的主进程。
2.发送TERM信号到新的主进程。发送信息到它的工作进程要求马上终止。但新的主进程停止，旧的主进程将会自动启动新的工作进程。
如果新的主进程停止，旧的工作进程会去除进程ID文件的.oldbin后缀。
如果升级工程，旧的工作进程会被发送QUIT信号，并只有新的工作进程会保留。

D.连接处理方法
nginx支持多种连接处理方式。特定方法的可用性依赖于使用的平台。在支持多种方法的平台上，nginx通常会自动选择最有效的方法。但是，如果有需要，可以使用use指令显式地选择连接处理方法。
下列连接处理方法被支持：
1.select    标准方法，支持模块是在缺乏更有效方法的平台上自动构建的。可以使用--with-select_module和--without-select_module配置参数强制启动或禁用此模块的构建。
2.poll      标准方法，支持模块是在缺乏更有效方法的平台上自动构建的。可以使用--with-poll_module和--without-poll_module配置参数强制启动或禁用此模块的构建。
3.kqueue    在FreeBSD4.1+ OpenBSD2.9+ NetBSD2.0和macOS上有效
4.epoll     在Linux2.6+上有效
5./dev/poll 在Solaris7 11/99+ HP/UX 11.22+ IRIX6.5.15+ Tru64 UNIX 5.1A+上有效
6.eventport Solaris 10+


E.设置散列
为了快速处理静态数据集诸如server名称，map指令值，MIME类型，请求头字符串名称，nginx使用散列表。在启动和每个重新配置过程中，nginx选择可能的最小的散列表，以便存储基友相同哈希值的键的桶的大小不会超过配置的参数（hash_bucket_size)。表的大小用桶表示。调整直到表大小超过hash_max_size参数。大多数散列都有相应的指令，允许更改这些参数，例如，对于服务器名称散列，是server_names_max_size和server_names_hash_bucket_size
散列桶代销参数与处理器缓存行大小倍数的大小对其。

F.调试日志
为了启用调试日志，nginx需要被配置成支持调试
./configure --with-debug
然后调试级别应该用error_log指令设置
error_log /path/to/log debug
验证nginx是否支持调试，运行nginx -V命令
nginx -V
预构建的Linux包为调试日志提供了开箱即用的支持，可以使用nginx-debug命令运行二进制文件
注意，在不指定调式级别的情况下重新定义日志将禁用调试日志。
error_log logs/error.log debug;
http {
    server {
        error_log logs/error.log debug;
        ...
    }
}

1.为选择的客户端收集调试日志
error_log logs/error.log;

events {
    debug_connection 192.168.1.1;
    debug_connection 192.168.10.0/24;
}

2.记录日志到循环内存缓存区
error_log memory:23m debug;
在调试级别将日志记录到内存缓存区不会对性能产生重大影响，即使在高负载下也是如此。可以使用gdb脚本提取日志
set $log = ngx_cycle->log

while $log->writer != ngx_log_memory_writer
    set $log = $log->next
end

set $buf = (ngx_log_memory_buf_t *) $log->wdata
dump binary memory debug_log.txt $buf->start $buf->end

G.记录日志到系统日志
error_log和access_log指令支持记录日志到系统日志。下列参数配置:
1.server=address
定义一个系统日志服务器的地址。可定义为域名或IP地址和一个可选的端口或作为Unix域套接字路径以'unix:'前缀。如果端口未被指定，则UDP端口514将被使用。如果域名指向数个IP地址，首个将被使用。
2.facility=string
设置系统日志信息的能力 “kern”, “user”, “mail”, “daemon”, “auth”, “intern”, “lpr”, “news”, “uucp”, “clock”, “authpriv”, “ftp”, “ntp”, “audit”, “alert”, “cron”, “local0”..“local7”,默认是local7
3.severity=string
为访问日志设置系统日志严重性。默认值是info
4.tag=string
设置系统日志信息的标签，默认是nginx
5.nohostname
禁止添加hostname属性到系统日志消息头
示例:
error_log syslog:server=192.168.1.1 debug
access_log syslog:server=unix:/var/log/nginx.sock.nohostname
access_log syslog:server=[2001:db8::1]:12345,facility=local7,tag=nginx,severity=info combined;

H.配置文件计量单位
大小可以指定为字节、千字节（K或k），兆字节（M或m），G字节（g或G）
时间间隔可以用毫秒、秒、分钟、小时、天等指定
ms      milliseconds
s       seconds
m       minutes
h       hours
d       days
w       weeks
M       month, 30 days
y       year, 365 days
可以将多个单位混合在单个值，从最大到最小顺序指定，并可选空格分隔。例如 1h 30m和 90m 5400s相同。

I.命令行参数
nginx支持下列命令行参数
1.-? | -h       打印帮助信息
2.-c file       使用一个备选的配置文件替代默认的文件
3.-g directives 设置全局配置指令
4.-p prefix     设置nginx目录前缀，一个目录将存放服务器文件
5.-q            在配置测试期间抑制非错误信息
6.-s signal     发送信号到主进程
    stop        快速终止
    quit        优雅终止
    reload      重载配置，开启新的工作进程使用新的配置，优雅终止旧的工作进程
    reopen      重启日志文件
7.-t            测试配置文件
8.-T            和-t类似，但
9.-v            打印nginx版本
10.-V           打印nginx版本，编译版本和配置参数

J.nginx如何处理一个请求
nginx首先决定哪个服务器应该处理请求。
nginx只判断请求头属性Host去决定哪个服务器将被路由到。如果这个值没有匹配到任何服务器名，或请求不包含Host请求头属性。nginx将会路由到这个端口的默认server上。可以使用指令显式指定默认服务器
http {
    server {
        listen 80 default_server; # 0.8.21之前使用default
        server_name com.sun.health;
    }
}

1.如何阻止未定义server名称的请求
server {
    listen 80;
    server_name "";
    return 444;
}
这个server将匹配没有Host请求头属性的请求，并返回444错误码

2.混合基于名称和基于IP的虚拟server
nginx首先根据server块监听的IP地址和端口，再根据请求头Host属性匹配。

3.PHP站点配置 (PHP没看过)
Now let’s look at how nginx chooses a location to process a request for a typical, simple PHP site:

server {
    listen      80;
    server_name example.org www.example.org;
    root        /data/www;

    location / {
        index   index.html index.php;
    }

    location ~* \.(gif|jpg|png)$ {
        expires 30d;
    }

    location ~ \.php$ {
        fastcgi_pass  localhost:9000;
        fastcgi_param SCRIPT_FILENAME
                      $document_root$fastcgi_script_name;
        include       fastcgi_params;
    }
}
nginx first searches for the most specific prefix location given by literal strings regardless of the listed order. In the configuration above the only prefix location is “/” and since it matches any request it will be used as a last resort. Then nginx checks locations given by regular expression in the order listed in the configuration file. The first matching expression stops the search and nginx will use this location. If no regular expression matches a request, then nginx uses the most specific prefix location found earlier.

Note that locations of all types test only a URI part of request line without arguments. This is done because arguments in the query string may be given in several ways, for example:

/index.php?user=john&page=1
/index.php?page=1&user=john
Besides, anyone may request anything in the query string:

/index.php?page=1&something+else&user=john
Now let’s look at how requests would be processed in the configuration above:

A request “/logo.gif” is matched by the prefix location “/” first and then by the regular expression “\.(gif|jpg|png)$”, therefore, it is handled by the latter location. Using the directive “root /data/www” the request is mapped to the file /data/www/logo.gif, and the file is sent to the client.
A request “/index.php” is also matched by the prefix location “/” first and then by the regular expression “\.(php)$”. Therefore, it is handled by the latter location and the request is passed to a FastCGI server listening on localhost:9000. The fastcgi_param directive sets the FastCGI parameter SCRIPT_FILENAME to “/data/www/index.php”, and the FastCGI server executes the file. The variable $document_root is equal to the value of the root directive and the variable $fastcgi_script_name is equal to the request URI, i.e. “/index.php”.
A request “/about.html” is matched by the prefix location “/” only, therefore, it is handled in this location. Using the directive “root /data/www” the request is mapped to the file /data/www/about.html, and the file is sent to the client.
Handling a request “/” is more complex. It is matched by the prefix location “/” only, therefore, it is handled by this location. Then the index directive tests for the existence of index files according to its parameters and the “root /data/www” directive. If the file /data/www/index.html does not exist, and the file /data/www/index.php exists, then the directive does an internal redirect to “/index.php”, and nginx searches the locations again as if the request had been sent by a client. As we saw before, the redirected request will eventually be handled by the FastCGI server.

K.服务器名称
Server名称使用server_name指令定义，并用于确定那个server块将被用于处理请求。可以是精确名称、通配符名称或正则表达式名称。
当使用名称搜索虚拟服务器时，匹配到多个变体。将按照下列优先次序选择第一个匹配变体。
1.精确名称
2.最长的通配符名称以*开始
3.最长的通配符名称以*结尾
4.第一个匹配的正则表达式

1.通配符名称
通配符名称只能在开始或结尾处包含*。然而，服务器名称也可以被定义为正则表达式 （以~开头）
特殊的通配符名称'.example.org'能够匹配精确名称'com.example.org'和通配符名称'*.example.org'
2.正则表达式名称
nginx使用正则表达式与Perl编程语言（PCRE）使用的正则表达式兼容。要使用正则表达式，服务器名称必须以波浪~开头
否则将被视为确切名称或表达式中含有星号则被视为通配符名称。不要忘记设置^和$,不是语法上必需的，而是逻辑上需要的。需要注意，域名.应该用反斜杠转义，应引用含有{和}字符的正则表达式。
命名的正则表达式可以获取在之后用于变量
{
    server_name ~^(www\.)?(?<domain>.+)$;   # .+匹配的group赋值给domain
    location / {
        root /sites/$domain
    }
}
获取的变量也可以用数字形式（group）
3.多个名称
如果需要在非默认的服务器中处理没有Host属性的请求，需要指定一个空名称
server {
    server_name com.example.org "";
}
如果没有定义server_name，nginx使用空名称""
server_name定义为$hostname则必须hostname
如果请求使用IP地址代替服务器名称，可以使用IP地址作为server_name
_这类特殊的server_name没有任何特别之处，只是众多无效域名中的一个。这些域名从不与任何真名比较。
4.国际化名称
在server_name中使用ASCII
5.最佳实践
精确名称、以*开头的名称、以*结尾的名称被存储在3个hash表中。
首先搜索精确名称的hash表。如果，没有找到匹配。然后搜索以*开头的通配符名称hash表。最后搜索以*结尾的通配符名称hash表。
搜索通配符名称hash表比精确名称hash表慢，值得注意的是.example.org被存储在通配符名称而不是精确名称hash表中。
正则表达式
