<?xml version="1.0" encoding="UTF-8"?>
<!--

    Spring Boot 介绍
    Spring Boot可以基于Spring轻松创建可以"运行"的、独立的、生产级的应用程序。对Spring平台和第三方类库有自己的看法和意见（约定大于配置）。大多数Spring Boot应用程序需要很少的Spring配置。
    可以使用SpringBoot创建可以使用java -jar或传统war包部署启动的Java应用程序。还提供了一个运行“spring scripts”的命令行工具。
    主要目标：
    1.位所有Spring开发者提供一个更快，更广泛接受的入门体验。
    2.开始使用开箱即用的配置（极少配置甚至不用配置），但随着需求开始配置自己所需要的值（即所有配置都有默认值，同时也可以根据自己的需求进行配置）
    3.提供大量项目中常见的一系列非功能特征（例如嵌入式服务器，安全性，指标，运行状况检查，外部话配置）
    4.绝对没有代码生成，也不需要XML配置

    安装
    1.可以使用Spring Boot CLI安装
    2.使用Maven安装
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.3.RELEASE</version>
    </parent>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

    SpringBoot提供了一些启动器(Starters),可以方便地将jar添加到类路径中。
    格式
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-xxx</artifactId>
    示例中的<parent>使用spring-boot-starter-parent,这是一个特殊启动器，提供了一些Maven默认值，还提供了dependency-management标签，以便省略依赖关系的版本标签

    @EnableAutoConfiguration
    告诉Spring Boot根据添加的jar依赖关系来猜测如何配置Spring。

    启动器和自动配置
    自动配置旨在与启动器配合使用，但两个概念并不直接相关。可以自由选择启动器之外的jar依赖项，SpringBoot仍然会自动配置应用程序。

    main方法
    遵循Java惯例的应用程序入口点的标准方法。main()方法通过调用run()委托delegate给SpringBoot的SpringApplication类。SpringBootApplication将引导应用程序，启动Spring，然后启动自动配置的TomcatWeb服务器。

    创建可执行的jar
    可执行的jar("fat jars"),是包含编译的类以及代码运行所需要的所有jar依赖的归档(archives)

    使用SpringBOot
    涵盖构建系统、自动配置以及如何运行应用程序。

    构建系统
    强烈建议使用Maven或者Gradle
    依赖管理
    每个版本的SpringBoot提供一个所支持的依赖关系列表。实际上，不需要为构建配置文件中的这些依赖关系提供版本，因为SpringBoot会管理这些依赖的版本。当升级SpringBoot本身时，这些依赖关系也会一致的进行升级。
    管理的列表中包含可以使用SpringBoot的所有Spring模块以及第三方库的精简列表。改列表可作为标准的物料清单使用。
    强烈不建议自己制定版本。
    Maven
    Maven用户可以从spring-boot-starter-parent项目中继承，已获得合理的默认值。
    1.Java1.6作为默认编译器级别
    2.源代码UTF-8编码
    3.依赖关系管理，允许省略常见依赖的标签，默认版本继承自spring-boot-dependenciesPOM
    3.更合理的资源过滤
    4.针对application.properties和application.yml的更合理的资源过滤，包括特定的文件(application-foo.properties和application-foo.yml）
    5.由于默认的配置文件接受Spring样式占位符${...},Maven过滤更改为使用@...@占位符
    继承启动器parent
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.3.RELEASE</version>
    </parent>
    只需要在parent上指定了版本，再导入其他起始器可以放心地省略版本号。
    通过设置，可以覆盖项目中的属性来覆盖单个依赖。例如
    <properties>
        <spring-data-releasetrain.vesion>Fowler-SR2</spring-data-releasetrain.version>
    </properties>
    需要修改去spring-boot-dependencies中查看，覆盖依赖的properties即可
    使用没有父POM的SpringBoot
    使用scope=import依赖来保持依赖管理
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>1.5.3.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    此时不能通过修改properties来覆盖依赖版本，而需要在<dependencyManagement>中添加需要的版本，并且在spring-boot-dependencies之前
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-data-releasetrain</artifactId>
                <version>XXX</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>1.5.3.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    更改Java版本
    <properties>
        <java.version>1.8</java.version>
    </properties>
    使用SpringBootMaven插件
    可以将项目打包成可执行jar，需要添加
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

    启动器
    启动器是一组方便的依赖关系描述符，可以包含在应用程序中，可以获得所需的所有Spring和相关技术的一站式服务，无需通过实例代码搜索和复制粘贴依赖配置。例如，如果要开始使用Spring和JPA进行数据库访问，那么只需在项目中包含spring-boot-starter-data-jpa即可。
    启动器包含许多依赖关系，包括需要使项目快速启动并运行，并具有一致的受支持的依赖传递关系。
    所有正式启动器都遵循类似的命名模式 spring-boot-starter-，之后是特定类型的应用程序。
    第三方启动器不应该从spring-boot开始，而是以自定义值开始。
    spring-boot-starter-thymeleaf	使用Thymeleaf视图构建MVC Web应用程序的启动器	Pom
    spring-boot-starter-data-couchbase	使用Couchbase面向文档的数据库和Spring Data Couchbase的启动器	Pom
    spring-boot-starter-artemis	使用Apache Artemis的JMS启动器	Pom
    spring-boot-starter-web-services	Spring Web Services 启动器	Pom
    spring-boot-starter-mail	Java Mail和Spring Framework的电子邮件发送支持的启动器	Pom
    spring-boot-starter-data-redis	Redis key-value 数据存储与Spring Data Redis和Jedis客户端启动器	Pom
    spring-boot-starter-web	使用Spring MVC构建Web，包括RESTful应用程序。使用Tomcat作为默认的嵌入式容器的启动器	Pom
    spring-boot-starter-data-gemfire	使用GemFire分布式数据存储和Spring Data GemFire的启动器	Pom
    spring-boot-starter-activemq	使用Apache ActiveMQ的JMS启动器	Pom
    spring-boot-starter-data-elasticsearch	使用Elasticsearch搜索和分析引擎和Spring Data Elasticsearch的启动器	Pom
    spring-boot-starter-integration	Spring Integration 启动器	Pom
    spring-boot-starter-test	使用JUnit，Hamcrest和Mockito的库测试Spring Boot应用程序的启动器	Pom
    spring-boot-starter-jdbc	使用JDBC与Tomcat JDBC连接池的启动器	Pom
    spring-boot-starter-mobile	使用Spring Mobile构建Web应用程序的启动器	Pom
    spring-boot-starter-validation	使用Java Bean Validation 与Hibernate Validator的启动器	Pom
    spring-boot-starter-hateoas	使用Spring MVC和Spring HATEOAS构建基于超媒体的RESTful Web应用程序的启动器	Pom
    spring-boot-starter-jersey	使用JAX-RS和Jersey构建RESTful Web应用程序的启动器。spring-boot-starter-web的替代方案	Pom
    spring-boot-starter-data-neo4j	使用Neo4j图数据库和Spring Data Neo4j的启动器	Pom
    spring-boot-starter-data-ldap	使用Spring Data LDAP的启动器	Pom
    spring-boot-starter-websocket	使用Spring Framework的WebSocket支持构建WebSocket应用程序的启动器	Pom
    spring-boot-starter-aop	使用Spring AOP和AspectJ进行面向切面编程的启动器	Pom
    spring-boot-starter-amqp	使用Spring AMQP和Rabbit MQ的启动器	Pom
    spring-boot-starter-data-cassandra	使用Cassandra分布式数据库和Spring Data Cassandra的启动器	Pom
    spring-boot-starter-social-facebook	使用Spring Social Facebook 的启动器	Pom
    spring-boot-starter-jta-atomikos	使用Atomikos的JTA事务的启动器	Pom
    spring-boot-starter-security	使用Spring Security的启动器	Pom
    spring-boot-starter-mustache	使用Mustache视图构建MVC Web应用程序的启动器	Pom
    spring-boot-starter-data-jpa	使用Spring数据JPA与Hibernate的启动器	Pom
    spring-boot-starter	核心启动器，包括自动配置支持，日志记录和YAML	Pom
    spring-boot-starter-groovy-templates	使用Groovy模板视图构建MVC Web应用程序的启动器	Pom
    spring-boot-starter-freemarker	使用FreeMarker视图构建MVC Web应用程序的启动器	Pom
    spring-boot-starter-batch	使用Spring Batch的启动器	Pom
    spring-boot-starter-social-linkedin	使用Spring Social LinkedIn的启动器	Pom
    spring-boot-starter-cache	使用Spring Framework缓存支持的启动器	Pom
    spring-boot-starter-data-solr	使用Apache Solr搜索平台与Spring Data Solr的启动器	Pom
    spring-boot-starter-data-mongodb	使用MongoDB面向文档的数据库和Spring Data MongoDB的启动器	Pom
    spring-boot-starter-jooq	使用jOOQ访问SQL数据库的启动器。 spring-boot-starter-data-jpa或spring-boot-starter-jdbc的替代方案	Pom
    spring-boot-starter-jta-narayana	Spring Boot Narayana JTA 启动器	Pom
    spring-boot-starter-cloud-connectors	使用Spring Cloud连接器，简化了与Cloud Foundry和Heroku等云平台中的服务连接的启动器	Pom
    spring-boot-starter-jta-bitronix	使用Bitronix进行JTA 事务的启动器	Pom
    spring-boot-starter-social-twitter	使用Spring Social Twitter的启动器	Pom
    spring-boot-starter-data-rest	通过使用Spring Data REST在REST上暴露Spring数据库的启动器	Pom
    除了应用程序启动器，以下启动器可用于添加生产准备(production ready)功能：

    表13.2 Spring Boot生产环境启动器

    名称	描述	Pom
    spring-boot-starter-actuator	使用Spring Boot Actuator提供生产准备功能，可帮助您监控和管理应用程序的启动器	Pom
    spring-boot-starter-remote-shell	使用CRaSH远程shell通过SSH监视和管理您的应用程序的启动器。 自1.5以来已弃用	Pom
    最后，Spring Boot还包括一些启动器，如果要排除或替换特定的技术，可以使用它们：

    名称	描述	Pom
    spring-boot-starter-undertow	使用Undertow作为嵌入式servlet容器的启动器。 spring-boot-starter-tomcat的替代方案	Pom
    spring-boot-starter-jetty	使用Jetty作为嵌入式servlet容器的启动器。 spring-boot-starter-tomcat的替代方案	Pom
    spring-boot-starter-logging	使用Logback进行日志记录的启动器。 默认的日志启动器	Pom
    spring-boot-starter-tomcat	使用Tomcat作为嵌入式servlet容器的启动器。 spring-boot-starter-web的默认servlet容器启动器	Pom
    spring-boot-starter-log4j2	使用Log4j2进行日志记录的启动器。 spring-boot-start-logging的替代方法	Pom


    构建代码
    不要使用“default”包
    当类不包括包声明时，被认为是在默认包中，通常不鼓励使用默认包，并应该避免使用。对于使用@ComponentScan @EntityScan @SpringBootApplication注解的SpringBoot应用程序，可能会有一些特殊的问题。
    查找主应用程序类
    通常建议将应用程序主类放在其他类之上的根包中。@EnableAutoConfiguration注解通常放置在主类上，隐式定义了某些项目的基本搜索包，例如JPA应用程序，则@EnableAutoConfiguration注解类的包将用于搜索@Entity类
    使用根包还可以使用@ComponentScan注解，而不需要basePackage属性，也可以使用@SpringBootApplication
    com
     +- example
         +- myproject
             +- Application.java
             |
             +- domain
             |   +- Customer.java
             |   +- CustomerRepository.java
             |
             +- service
             |   +- CustomerService.java
             |
             +- web
                 +- CustomerController.java
    主类
    package com.example.myproject;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
    import org.springframework.context.annotation.ComponentScan;
    import org.springframework.context.annotation.Configuration;

    @Configuration
    @EnableAutoConfiguration
    @ComponentScan
    public class Application {

        public static void main(String[] args) {
            SpringApplication.run(Application.class, args);
        }

    }


    配置类
    SpringBoot支持基于Java的配置，虽然可以使用XML配置用SpringApplication.run()，但通常建议主类是@Configuration类。
    导入其他配置类
    不需要将所有@Configuration放在一个类中，@Import注解可用于导入其他配置类，或者可以使用@ComponentScan自动扫面所有Spring组件，包括@Configuration
    导入XML配置
    建议仍然使用@Configuration注解主类，再使用@ImportResource注解来加载XML配置文件
    自动配置
    SpringBoot会根据添加的jar依赖关系自动配置Spring应用程序，例如，如果HSQLDB存在，并且没有手动配置如何数据库连接bean，那么会自动配置内存数据库。
    需要通过@EnableAutoConfiguration或@SpringBootApplication注解添加到一个@Configuration类中来启动自动配置
    应该只添加一个@EnableAutoConfiguration,通常建议添加在主类上。
    主键取代自动配置
    自动配置是非侵入式的，可以随时定义自己的配置来替换自动配置，例如如果添加了自定义的数据库连接bean，默认的嵌入式数据库支持将会退回。
    需要了解当前有哪些自动配置，请使用-debug开关启动应用程序，将自动配置日志输出到控制台。
    禁用指定的自动配置
    使用@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})来禁用数据库自动配置
    如果类不在classpath路径上，则可以使用注释的excludeName属性，并指定全限定名，最后还可以通过spring.autoconfiguration.exclude属性控制要排除的自动配置类列表

    Spring Beans和依赖注入
    可以使用任何标准的SpringFramework技术来定义bean及其依赖注入关系。为了简单起见，使用@ComponentScan搜索Bean，结合@AutoWired构造函数

    使用SpringBootApplication注解
    SpringBootApplication相当于使用@Configuration @EnableAutoConfiguration @ComponentScan的默认配置
    同时也提供了自定义的@EnableAutoConfiguration @ComponentScan的配置参数

    运行
    1.可以直接执行主类的main方法
    2.使用mvn package之后，java -jar 应用.jar
    3.mvn spring-boot:run执行

    开发工具
    SpringBoot包括一组额外的工具，可以增强开发体验。spring-boot-devtools模块可包含在任何项目中，以提供额外的开发功能。
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-devtools</artifactId>
        <optional>true</optional>
    </dependency>
    属性默认值
    SpringBoot支持使用缓存来提高性能。例如，模板引擎将缓存编译的模板，以避免重复解析模板文件。SpringMVC可在返回静态资源时向响应中添加HTTP缓存头。
    虽然缓存在生产中非常有益，但在开发过程中可能阻止发现刚刚应用程序作出的更改，因此，spring-boot-devtools将默认禁用这些缓存选项。
    自动重启
    使用spring-boot-devtools的应用程序将在类路径上的文件发生更改时自动重新启动。默认情况下，将监控指向文件夹的类路径上的任何条目。但某些资源（如静态资源和视图模板）不需要重新启动应用程序。
    触发重启
    当DevTools监视类路径资源时，触发重新启动的唯一方法是更新类路径中的文件。
    重新启动 和 重新加载
    SpringBoot提供的重新启动技术使用两个类加载器。不会改的类（例如第三方的jar）被加载到基类加载器中，开发中的类则被加载到重新启动（restart）类加载器中。当应用程序重新启动时，重新启动类加载器将被丢弃，并创建一个新的类加载器。这种方法以为这应用程序重新启动通常比冷启动快的多，以为基类加载器已经可以使用。
    排除资源
    在类路径下，某些资源在更改时不一定需要触发重新启动。默认情况下，更改META-INF/maven，/META-INF/resources，/resources，/static，/public或/templates中的资源不会触发重新启动，但会触发重新加载。
    如果要自定义这些排除项，可以使用spring.devtools.restart.exclude属性。例如
    spring.devtools.restart.exclude=static/**,public/**
    如果需要保留这些默认值并添加其他排除项，请使用spring.devtools.restart.additional-exclude属性
    监视额外的路径
    使用spring.devtools.restart.additional-paths属性来配置其他路径以监视更改。配合spring.devtools.restart.exclude属性来控制附加路径下的更改是否会触发完全重新启动或只是实时重新加载。
    禁用重启
    spring.devtools.restart.enabled属性 这会初始化重新启动类加载器，但不会监视文件更改
    完全禁用需要在主类main方法中SpringBootApplication.run()之前设置System.setProperty("spring.boot.restart.enabled", "false");
    使用触发文件
    spring.devtools.restart.trigger-file属性 重新启动之前必须修改此文件。更改文件只会触发检查，只有在Devtools检测到必要执行的操作后才会重新启动。
    自定义重新启动类加载器
    默认情况下，任何打开的项目将使用重新启动类加载器加载，任何jar文件将使用base类加载器加载。如果在多模块上工作，而不是每个模块都导入，则可能需要自定义时间。可以创建一个META-INF/spring-devtools.properties文件
    spring-devtools.properties文件可以包含restart.exclude和restart.include.prefixed属性。include元素时应该被拉入重新启动类加载器的项目，exclude元素则时应该使用base类加载器的项目
    已知的限制
    重新启动功能对于使用标准ObjectInputStream反序列化的对象无效。如果需要反序列化数据，可能需要使用Spring的ConfigurableObjectInputStream与Thread.currentThread().getContextClassLoader()组合使用

    devtools模块中包含了一个嵌入式的liveReload服务器，可以在资源更改时用于触发浏览器刷新。
    如果不想使用liveReload，使用spring.devtools.livereload.enabled=false
    一次只能运行一个livereload服务器

    全局设置
    可以通过向$HOME文件夹添加名为.spring-boot-devtools.properties的文件来配置全局设置。添加到此文件的任何属性将适用于计算机上使用devtools的所有SpringBoot应用程序

    SpringBoot功能

    SpringApplication
    SpringApplication类提供了一种方便的方法来引导将从main()方法启动的Spring应用程序，大部分情况下，只需要委派静态SpringApplication.run()方法即可
    public static main(String[] args) {
        SpringApplication.run(MySpringConfiguration.class, args);
    }
    启动失败
    如果应用程序启动失败，则注册的FailureAnalyzers会提供专门的错误消息和具体操作来解决问题。
    自定义Banner
    可以通过载类路径中添加一个banner.txt文件，或者banner.location设置到banner文件的位置来更改启动时打印的banner。如果文件有小一些不常用的编码，可以设置banner.charset。除了文本文件，还可以将banner.gif .jpg .png图像文件添加到类路径中，或者设置一个banner.image.location属性。图像将被转换成ASCII艺术表现，打印在任何文字之上。

    定制SpringApplication
    public static void main(String[] args) {
        SpringApplication app = new SpringApplication(Configuration.class);
        app.setBannerMode(Banner.Mode.OFF);
        app.run(args);
    传递给SpringApplication的构造函数参数是spring bean的配置源，大多数情况下，将引用@Configuration类，但也可以引用XML配置或应扫描的包。
    Application 事件和监听器
    除了常见的Spring Framework事件（如ContextRefreshEvent）之外，SpringApplication还会发送一些其他应用程序事件
    希望自动注册监听器，可以添加META-INF/spring.factories文件，并设置
    org.springframework.context.ApplicationListener=com.example.project.MyListener
    当应用程序运行时，事件按照以下顺序发送
    1.ApplicationStartingEvent在运行开始时发送，但在注册监听器和注册初始化器之后。
    2.当已经知道要使用的上下文环境（context），并在context创建之前，将发送ApplicationEnvironmentPreparedEvent
    3.ApplicationPreparedEvent在启动刷新之前发送，但在加载bean定义之后
    4.ApplicationReadyEvent在刷新之后被发送，并处理了任何相关的回调以指示应用程序准备好服务请求
    5.启动发生异常时，发送ApplicationFailedEvent

    Web环境
    SpringApplication将尝试创建正确类型的ApplicationContext，。默认情况下将使用AnnotationConfigApplicationContext或AnnotationConfigEmbeddedWebApplicationContext，具体取决于是否正在开发Web应用程序。
    如果需要覆盖默认值，可以使用setWebEnvironment(boolean )
    也可以通过调用setApplicationContextClass()对ApplicationContext完全控制

    访问应用程序参数
    如果需要访问传递给SpringApplication.run()的应用程序参数，则可以注入ApplicationArguments bean.ApplicationArguments接口提供对原始String[]参数以及解析选项和非选项参数的访问。
    SpringBoot还将向Spring Environment注册一个CommandLinePropertySource，允许使用@Value注解注入应用程序参数。

    使用ApplicationRunner或CommandLineRunner
    SpringApplication启动时如果需要运行一些特定的代码，可以实现ApplicationRunner或CommandLineRunner接口。两个接口都以相同的方式工作，并提供一个单独的运行方法，将在SpringApplication.run完成之前调用
    CommandLineRunner接口提供对应用程序参数的访问（简单的字符串数组），而ApplicationRunner使用上述的ApplicationArguments接口
    如果定义了若干个CommandLineRunner或ApplicationRunner，必须按照顺序调用，可以显现Ordered接口或者使用Order注解



-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>myproject</artifactId>
    <version>0.0.1-SNAPSHOT</version>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.3.RELEASE</version>
    </parent>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
    </dependencies>

</project>