<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd"
       default-init-method="init"
       default-destroy-method="destroy"
>

    <!--
        Spring体系结构
        1.核心容器
            A.Core 模块提供了框架的基本组成部分，包括IoC和依赖注入功能。
            B.Bean 模块提供BeanFactory，是一个工厂模式的复杂实现
            C.Context 模块建立在由Core和Bean模块提供的坚实基础上，是访问定义和配置的任何对象的媒介。ApplicationContext接口是Context模块的重点。
            D.SpEL 模块在运行时提供了查询和操作一个对象图的强大的表达式语言。
        2.数据访问/集成
            A.JDBC 模块提供了删除冗余的JDBC相关编码的JDBC抽象层。
            B.ORM 模块为流行的对象关系映射API，包括JPA、JDO、Hibernate和Mybatis，提供了集成层。
            C.OXM 模块提供了抽象层，支持对JAXB、Castor、XMLBeans、JiBX和XStream的对象/XML映射实现。
            D.Java消息服务JMS 模块包含生产和消费的信息的功能。
            E.Transaction 模块为实现特殊接口的类及所有POJO支持编程式和声明式事务管理。
        3.Web
            A.Web 模块提供了基本的面向Web的继承功能，例如多个文件上传的功能和使用Servlet监听器和面向Web应用程序的上下文来初始化IoC容器。
            B.Web-MVC 模块包含Spring的模型-视图-控制器（MVC），实现web应用程序。
            C.Web-Socket 模块为WebSocket-based提供了支持，而且在web应用程序中提供了客户端和服务端之间通信的两种方式。
            D.Web-Portlet 模块提供了在portlet环境中实现MVC，并且反映了Web-Servlet模块的功能。
        4.其他
            A.AOP 模块提供了面向切面的编程实现，允许定义方法拦截器和切入点对代码进行干净地解耦。
            B.Aspects 模块了AspectJ的集成，功能强大且成熟的面向切面编程（AOP）框架
            C.Instrumentation 模块在一些应用服务器中提供了类instrumentation的支持和类加载器的实现、
            D.Messaging 模块为STOMP提供了支持，作为在应用程序中WebSocket子协议的使用，支持一个注解编程模型。
            E.Test 测试模块支持对具有JUnit或TestNG框架的Spring组件的测试


        简单示例：HelloWorld和MainApp两个类和此配置文件
        1.使用ApplicationContext创建应用程序的上下文，这个API加载Beans的配置文件并最终基于所提供，处理创建并初始化所有对象，即在配置文件中提到的Beans
        2.使用已创建的上下文的getBeans()方法来获得所需的bean。这个方法使用Bean的ID返回一个最终可以转换为实际对象的通用对象。


        Spring IoC容器
        Spring容器和Spring框架的核心。容器将创建对象，并连接在一起，配置，管理生命周期，从创建到销毁。Spring容器使用以来注入（DI）来管理组成一个应用程序的组件，称为Spring Beans。
        通过配置元数据提供的指令，容器知道哪些对象需要实例化，配置和组装。配置元数据可以通过XML、Java注释或Java代码表示。

        Spring提供了两种不同类型的容器
        1.Spring BeanFactory容器
            最简单的容器，给DI提供了基本支持，由BeanFactory接口定义
        2.Spring ApplicationContext
            添加更多功能，例如从属性文件中解析文本信息的能力。由ApplicationContext接口定义

        Spring BeanFactory容器
        BeanFactory和相关的接口，比如BeanFactoryAware、DisposableBean、InitializingBean，仍然保留在Spring中，目的是向后兼容已经存在的和Spring整合的第三方框架。
        Spring中，有大量对BeanFactory接口的实现，最常使用的XMLBeanFactory。这个容器从一个XML文件中读取配置元数据，然后生成一个配置化的系统或者应用。
        BeanFactory beanFactory = new XmlBeanFactory(new ClassPathResource("application-context.xml"))

        Spring ApplicationContext容器
        包含BeanFactory所有功能，并在此基础上添加额外的功能。
        最常使用的ApplicationContext实现：
        1.ClassPathXmlApplicationContext
        2.FileSystemXmlApplicationContext
        3.WebXmlApplicationContext
        ApplicationContext applicationContext = new ClassPathXmlApplicationContext("application-context.xml")

        Spring Bean定义
        Bean是一个被实例化、组装并通过SpringIoC容器所管理的对象。
        <bean ></bean>标签中的属性
        属性                              描述
        class                           必填，指定创建Bean的类
        name/id                         指定唯一标识符，基于XML的配置元数据中，可以使用ID和/或name属性来指定bean标识符
        scope                           特定作用域
        constructor-arg                 用于注入依赖关系
        properties                      用于注入依赖关系
        autowiring mode                 用于注入依赖关系
        lazy-initialization mode        延迟初始化Bean，容器在第一次被请求使用的时候创建而不是在初始化容器的时候
        initialization                  在bean的所有必需的属性被容器设置之后，调用回调方法
        destruction                     包含此bean的容器被销毁的时候，调用毁掉函数
        Spring配置元数据
        1.基于XML配置文件
        2.基于注解
        3.基于Java类

        Spring Bean作用域
        作用域                     描述
        Singleton               限制在每一个Spring IoC容器中单一实例（默认选项）
        prototype               任意数量实例，每次请求创建一个
        request                 限制在Http请求中，只在web-aware Spring ApplicationContext的上下文中生效
        session                 限制在Http会话中，只在web-aware Spring ApplicationContext的上下文中生效
        global-session          限制在全局Http会话中

        singleton作用域
        如果为singleton作用域，那么SpringIoC容器只创建一个由该Bean定义的对象的实例。存储在高速缓存中，每次请求都返回此缓存对象。
        prototype作用域
        如果为prototype作用域，那么SpringIoC容器在每次请求时创建一个新的对象实例。


        Bean生命周期
        当一个Bean实例化时，可能需要执行一些初始化工作，当从容器中移除时，可能需要一些清除工作。
        1.@PostConstruct @PreDestroy (注解默认不识别 需要配置<context:annotation-config /> 或CommonAnnotationBeanPostProcessor的Bean)
        2.实现InitializingBean和DisposableBean接口
        3.在Bean配置元数据中配置init-method和destroy-method
        顺序按照从上向下



        默认初始化和销毁方法
        在beans标签中添加default-init-method和default-destroy-method属性

        Spring Bean后置处理器 BeanPostProcessor
        BeanPostProcessor接口定义回调方法，可以实现该方法来提供自己的实例化逻辑，依赖解析逻辑等。可以配置多个BeanPostProcessor接口，通过设置BeanPostProcessor继承的Ordered接口提供的order属性来控制执行顺序。
        BeanPostProcessor可以对Bean实例进行操作，意味着SpringIoC容器实例化一个bean实例后BeanPostProcessor产生工作。
        ApplicationContext会自动检测由BeanPostProcessor接口实现定义的Bean，自动注册这些Bean为后置处理器。
        public class TestBeanPostProcessor import BeanPostProcessor, Ordered {
            public int getOrder() {
                return 0; // 顺序
            }
            public Object postProcessBeforeInitialization(Object bean, String bean_id) throws BeanException {
                // 在调用构造函数之前 对Bean进行一些处理
                return bean;
            }
            public Object postProcessAfterInitialization(Object bean, String bean_id) throws BeanException {
                // 在调用构造函数之后 且在@PostConstruct InitializingBean init-method之后 对Bean进行一些处理
                return bean;
            }
        }

        Spring Bean定义继承
        Bean定义可以包含很多配置信息，包括构造函数的参数，属性值，容器的具体信息例如初始化方法，静态工厂方法名等。
        子Bean的定义可以继承父Bean的配置数据，还可以根据需要重写一些值，或者添加其他值。
        <bean abstract="true">
        <bean parent="parent_bean_id">
        仅仅继承配置信息，且父Bean的配置元数据不能比子Bean多


        Spring 依赖注入
        无需关注依赖对象的具体实现而由SpringIoC容器统一管理，在实例化时注入。
        1.Constructor-based dependency injection
        基于构造函数的依赖注入
        2.Setter-based dependency injection
        基于setter方法的依赖注入 调用默认构造函数或静态工厂方法实例化bean调用bean的setter方法
        3.混用以上两种方法

        Spring基于构造函数的依赖注入
        <bean id="bean_id" class="class_path">
            <constructor-arg value="" ref="" type="" index="" />
        </bean>
        1.constructor-arg 需要按照构造函数参数顺序
        2.使用type显示指定构造函数参数的类型
        3.使用index显示指定构造函数参数的索引（最好）

        基于setter函数的依赖注入
        <bean id="" class="">
            <property name="" ref="" value="" />
        </bean>
        或者
        <bean id="" class=""
            p:name=""
            p:job-ref=""
        >
        </bean>
        可以使用p:property_name指定setter的value 或者 p:property_name-ref="" 指定对应bean的ref

        Spring 注入内部Beans
        inner bean是在其他bean的范围内定义的bean，被称为内部bean
        <bean id="" class="">
            <constructor-arg>
                <bean class=""></bean>
            </constructor-arg>
            <property name="">
                <bean class=""></bean>
            </property>
        </bean>

        Spring 注入集合
        value 传入一个基本类型和String
        ref 传入一个bean
        如果想传递其他类型，例如容器类型List、Set、Map、Properties
        需要使用
        <list>
            <value>值</value>
            <ref bean="" />
        </list>
        <set>
            <value>值</value>
            <ref bean="" />
        </set>
        <map>
            <entry key="" key-ref="" value="" value-ref="" />
        </map>
        <props>
            <prop key="">值</prop>
        </props>
        需要注入空值null和空字符串的
        1.value=""即为空字符串
        2.<null/>作为null值


        SpringBean 自动装配
        Spring容器可以在不使用<constructor-arg>和<property>元素的情况下自动装配相互协作的bean之间的关系。
        <bean autowired="">
        模式          描述
        no          默认配置，不自动装配，应该使用显式的Bean引用
        byName      由属性名自动装配，尝试使用和属性名相同的bean来装配
        byType      有属性数据类型自动装配，尝试使用配置中类型匹配的bean，如果有多个则抛出异常
        constructor 类似于byType，但适用于构造函数参数类型，如果没有匹配则抛出异常
        autodetect  首先尝试构造函数装配，如果失败则使用byType类型
        自动装配的优缺点
        优点：可以显著减少需要指定的属性或构造参数
        缺点：1.重写的可能性 2.原始数据类型 不能自动配装简单类型包括基本类型、字符串和类 3.混乱 自动装配不如显式装配精确，尽可能使用显式装配

        Spring 自动装配 byName
        尝试将属性名和beanId相同的进行装配

        Spring 自动装配 byType
        尝试使用属性相同类型的Bean进行装配 不存在或多个时抛出异常

        Spring由构造函数自动装配
        与byType非常相似，但应用于构造参数。


        Spring基于注解的配置
        在XML之前进行注解注入，后者会被前者覆盖
        需要<context:annotation-config />开启注解扫描
        1. @Required 应用于bean属性的setter方法
        2. @Autowired 应用于setter方法，非setter方法，构造函数和属性
        3.@ Qualifier 显式指定bean
        4.JSR-250 Annotations Spring支持JSR-250的基础的注解，其中包括@Resource @PostConstruct @PreDestroy

        @Required
        应用于bean类的setter方法上，表示注解的bean属性在配置时必须放在XML配置文件中，否则抛出异常。

        @Autowired
        在setter上使用@Autowired 会尝试byType自动装配
        在属性上使用@Autowired可以消除setter方法
        在构造函数上使用@Autowired可以注入对象,即便没有配置
        @Autowired(required=false) 默认@Autowired依赖时必须的，类似于@Required，可以添加required=false来关闭默认行为

        @Qualifier("bean_id")
        配合@Autowired注入指定ID的bean 可以避免存在多个相同类型的bean时抛出异常

        Spring JSR-250 注释
        @PostConstruct      可以用于代替初始化方法
        @PreDestroy         可以用于代替销毁方法
        @Resource           指定name参数，则可用于byName自动装配

        Spring基于Java的配置
        基于Java 的配置
        可以不配置XML编写大多数功能

        @Configuration和@Bean注解
        带有@Configuration的注解类表示这个类可以使用Spring IoC容器作为bean定义的来源。@Bean注解的方法将返回一个对象，这个对象应该被注册在Spring应用程序上下文汇总。
        @Scope("") 指定作用域
        @Import(XXXConfig.class) 导入其他Java配置类
        @Bean(initMethod="", destroyMethod="") 指定初始化和销毁方法
        @Conditional({
            <? extends Condition>.class
        }) 用于判断是否创建此Bean

        Spring中的事件处理
        ApplicationContext负责管理beans的完整生命周期，ApplicationContext在特定情况会发布某些事件，例如，上下文启动时，ContextStartedEvent，上下文结束时，ContextStoppedEvent发布
        通过ApplicationEvent类和ApplicationListener接口来提供在ApplicationContext中处理事件。如果bean实现了ApplicationListener，ApplicationContext发布ApplicationEvent时会接到通知
        Spring 提供标准事件
        1.ContextRefreshEvent           ApplicationContext被初始化或刷新时，改事件发布 ApplicationContext.refresh()
        2.ContextStartedEvent           使用ConfigurableApplicationContext接口start()方法启动时，发布该事件
        3.ContextStoppedEvent           使用ConfigurableApplicationContext的stop()方法
        4.ContextClosedEvent            ConfigurableApplicationContext的close()方法
        5.RequestHandledEvent           这是web-specific事件，通知bean HTTPRequest可用
        Spring的事件处理器是单线程的，一个事件发布，堵塞至所有接受者都得到改消息



        Spring框架的AOP
        Spring框架另一个关键组件是面向切面的编程（AOP)。
        AOP术语
        1.JoinPoint 连接点
            程序执行到某个特定位置：如类开始初始化前、类初始化后、类某个方法调用前、调用后、方法抛出异常后。一个类或一段程序代码拥有一些具有边界性质的特定点，这些点中的特定点就称为连接点。Spring仅支持方法的连接点，即仅能在方法调用前、调用后、抛出异常时这些程序执行点织入增强。连接点由两个信息确定：第一是用方法表示的程序执行点，第二是用相对点表示的方位。
        2.Pointcut 切点
            每个程序类都拥有多个连接点。AOP通过切点定位特定的连接点。连接点相当于数据库中的记录，而切点相当于查询条件。一个切点可以匹配多个连接点。在Spring中，切点通过PointCut接口描述，使用类和方法作为连接点的查询条件，SpringAOP的规则解析引擎负责切点锁设定的查询条件，找到对应的连接点
        3.Advice 增强
            增加是织入到目标类连接点上的一段程序代码，在Spring中，增强除了用于描述一段程序代码外，还拥有另一个和连接点相关的信息，便是执行点的方位，结合执行点方位信息和切点信息，可以定位到特定的连接点。
        4.TargetObject 目标对象
            增强逻辑的织入目标类。没有AOP，目标业务类需要自己实现所有逻辑，而在AOP帮助下，目标业务类只实现非横切的程序逻辑，注入性能监控和实物管理等这些横切逻辑则可以使用AOP动态织入到特定的连接点上。
        5.Introduction 引介
            引介是一种特殊的增强，为类添加一些属性和方法。即使一个业务类原本没有实现某个接口，通过引介可以动态为业务类添加接口的实现逻辑，使业务类称为接口的实现类。
        6.Weaving 织入
            将增强添加到目标类具体连接点上的过程。AOP有3中织入方式
            1.编译期织入 使用特殊的Java编译期
            2.类装载期织入 使用特殊的类装载器
            3.动态代理织入 在运行期为目标类添加增强生成子类的方式
            Spring使用动态代理 AspectJ使用编译期和类装载期
        7.Proxy 代理
            一个类被AOP织入增强后，产出一个结果类，融合原类和增强逻辑的代理类。
        8.Aspect 切面
            切面有切点和增强组成，既包括横切逻辑定义，也包括连接点的定义，AOP是负责实施切面的框架，将切面所定义的横切逻辑织入到切面所指定的连接点中
        通知的类型
        1.前置通知      在一个方法执行之前，执行通知
        2.后置通知      在一个方法执行之后，不考虑结果，执行通知
        3.返回后通知     在一个方法执行之后，只有在方法成功之后才执行通知
        4.抛出异常后通知 在一个方法执行之后，只有方法在抛出异常时，才执行通知
        5.环绕通知      在方法调用前后执行通知
        实现
        Spring支持@AspectJ annotation style的方法和基于XML模式

        Spring中基于AOP的XML架构
        需要在xml中引入aop的命名控件标签
        <aop:config>
            <aop:aspect id="" ref="">
                <aop:pointcut id="" expression="" />
                <aop:before pointcut-ref="" method="" />
                <aop:after pointcut-ref="" method="" />
                <aop:after-returning pointcut-ref="" method="" returning="返回的参数名" />
                <aop:after-throwing pointcut-ref="" method="" throwing="抛出异常的参数名" />
                <aop:around pointcut-ref="" method="" />

        <aop:aspect> 定义切面(切面包括通知和切点）
        <aop:advisor> 定义通知其（跟切点一致，包括通知和切点）
        1.实现方式不同
        <aop:aspect>只需定义普通的Bean即可 <aop:advisor>则需要实现Advice接口
        aop:advisor简化 基本只管理前后  大多用于事务管理
        aop:aspect则用于日志，缓存

        Spring中基于AOP的@AspectJ
        配置<aop:aspectj-autoproxy /> 支持@AspectJ
        @Aspect 用于类 标注这是一个Aspect配置Java类
        @Pointcut("") 用于方法 声明切点
        @Before("pointcut_id")
        @After("pointcut_id")
        @AfterReturning(value = "pointcut_id", returning = "")
        @AfterThrowing(value = "pointcut_id", throwing = "")
        @Around("")

        注意AfterReturning的方法使用Object类型参数接收返回值 AfterThrowing的方法使用Throwable接收抛出的异常
        Around(ProceedingJoinPoint joinPoint) 主要使用ProceedingJoinPoint来操作切点的方法
        Object result = joinPoint.proceed();
        return result;
        around()会改变方法执行的结果 慎重
    -->

    <context:annotation-config />

    <bean id="helloWorld" class="com.sun.health.flowable.spring.HelloWorld" scope="singleton" init-method="init_method" destroy-method="destroy_method">
        <property name="message" value="你好！" />
    </bean>

    <!--<bean class="com.sun.health.flowable.spring.ABeanPostProcessor" />
    <bean class="com.sun.health.flowable.spring.BBeanPostProcessor" />

    <bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor" />-->

    <bean id="abstractParent" abstract="true">
        <property name="messageA" value="Abstract A" />
        <property name="messageB" value="Abstract B" />
        <property name="messageC" value="Abstract C" />
        <!--<property name="messageD" value="Abstract D" />-->
    </bean>

    <bean id="helloParent" class="com.sun.health.flowable.spring.HelloParent">
        <property name="messageA" value="Parent A" />
        <property name="messageB" value="Parent B" />
        <!--<property name="messageD" value="Parent D" />-->
    </bean>

    <bean id="helloChild" class="com.sun.health.flowable.spring.HelloChild" parent="helloParent">
        <property name="messageA" value="Child A" />
        <property name="messageC" value="Child C" />
    </bean>

    <bean id="num" class="java.lang.Integer">
        <constructor-arg value="11" />
    </bean>

    <bean id="str" class="java.lang.String">
        <constructor-arg value="ELEVEN" />
    </bean>

    <bean id="argA" class="com.sun.health.flowable.spring.DIConstructorArgA"></bean>
    <!--<bean id="argAErr" class="com.sun.health.flowable.spring.DIConstructorArgA"></bean>-->

    <bean id="argB" class="com.sun.health.flowable.spring.DIConstructorArgB"></bean>

    <bean id="obj" class="com.sun.health.flowable.spring.DIConstructorObj">
        <constructor-arg ref="argA" />
        <constructor-arg ref="argB" />
    </bean>

    <bean id="obj2" class="com.sun.health.flowable.spring.DIConstructorObj">
        <constructor-arg index="1" ref="argB" />
        <constructor-arg index="0" value="你好" />
        <property name="argA" ref="argA" />
        <property name="num" value="10" />
    </bean>

    <bean id="obj3" class="com.sun.health.flowable.spring.DIConstructorObj"
        p:argB-ref="argB" p:str="不好"
    >
        <constructor-arg type="int" value="20" />
        <constructor-arg type="com.sun.health.flowable.spring.DIConstructorArgA" ref="argA" />
    </bean>

    <bean id="obj4" class="com.sun.health.flowable.spring.DIConstructorObj">
        <constructor-arg>
            <bean id="argAInner" class="com.sun.health.flowable.spring.DIConstructorArgA"></bean>
        </constructor-arg>
        <constructor-arg>
            <bean class="com.sun.health.flowable.spring.DIConstructorArgB"></bean>
        </constructor-arg>
    </bean>

    <bean id="javaCollection" class="com.sun.health.flowable.spring.JavaCollection">
        <property name="addressList">
            <list>
                <value>A</value>
                <value>B</value>
                <value>C</value>
                <value>C</value>
            </list>
        </property>
        <property name="addressSet">
            <set>
                <value>A</value>
                <value>B</value>
                <value>C</value>
                <value>C</value>
            </set>
        </property>
        <property name="addressMap">
            <map>
                <entry key="1"><null/></entry>
                <entry key="2" value="B" />
                <entry key="3" value="C" />
                <entry key="4" value="C" />
            </map>
        </property>
        <property name="addressProps">
            <props>
                <prop key="1">A</prop>
                <prop key="2">B</prop>
                <prop key="3">C</prop>
                <prop key="4">C</prop>
            </props>
        </property>
    </bean>



    <bean id="obj5" class="com.sun.health.flowable.spring.DIConstructorObj" autowire="byName">

    </bean>

    <bean id="obj6" class="com.sun.health.flowable.spring.DIConstructorObj" autowire="byType">

    </bean>

    <bean id="obj7" class="com.sun.health.flowable.spring.DIConstructorObj" autowire="constructor">

    </bean>

    <bean id="obj8" class="com.sun.health.flowable.spring.DIConstructorObj">

    </bean>

    <bean id="student1" class="com.sun.health.flowable.spring.Student">
        <property name="name" value="S1" />
        <property name="age" value="11" />
    </bean>

    <bean id="student2" class="com.sun.health.flowable.spring.Student">
        <property name="name" value="S2" />
        <property name="age" value="22" />
    </bean>

    <bean id="profile" class="com.sun.health.flowable.spring.Profile">

    </bean>


    <aop:config>
        <aop:pointcut id="selectAll" expression="execution(* com.sun.health.flowable.spring.*.*(..))" />
        <!--<aop:aspect id="log" ref="logging">
            <aop:before pointcut-ref="selectAll" method="beforeAdvice" />
            <aop:after pointcut-ref="selectAll" method="afterAdvice" />
            <aop:after-returning method="afterReturningAdvice" pointcut-ref="selectAll" returning="returnVal" />
            <aop:after-throwing method="afterThrowingAdvice" pointcut-ref="selectAll" throwing="ex" />
            <aop:around method="aroundAdvice" pointcut-ref="selectAll" />
        </aop:aspect>-->
        <!--<aop:advisor advice-ref="customAdviceHandler" pointcut-ref="selectAll" />-->
    </aop:config>

    <aop:aspectj-autoproxy />

    <bean id="customAdviceHandler" class="com.sun.health.flowable.spring.CustomAdviceHandler">

    </bean>

    <bean id="student" class="com.sun.health.flowable.spring.Student">
        <property name="age" value="23" />
        <property name="name" value="SS" />
    </bean>

    <bean id="logging" class="com.sun.health.flowable.spring.Logging"></bean>

    <bean id="aspectJLogging" class="com.sun.health.flowable.spring.AspectJLogging" />

</beans>