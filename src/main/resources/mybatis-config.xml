<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--
        这些属性都是可外部配置且可动态替换的，既可以在典型的Java属性文件中配置，亦可通过properties元素的子元素进行传递
        之后其中的属性就可以在整个配置文件中被用来替换需要动态配置的属性值

        如果属性在不只一个地方地方进行了配置 那么Mybatis将按照下面的顺序来加载：
        1.在properties元素体内指定的属性将首先被读取
        2.然后根据properties元素中的resource属性读取类路径下属性文件或根据url属性指定的路径读取属性文件，并覆盖已读取的同名属性
        3.最后读取作为方法传递的属性，并覆盖以读取的同名属性
        优先级顺序
        1.通过方法传递的属性
        2.resource/url属性指定的配置文件
        3.properties属性中指定的属性

        mybatis3.4.2开始，可以为占位符指定一个默认值
        格式 ${param_name:default_value}
        这个特性默认是关闭的，需要添加一个指定的属性来开启特性
        <property name="org.apache.ibatis.parsing.Property.enable-default-value" value="true" />
        提示：可以使用":"作为属性键（e.g.db:username)或者也可以在sql定义中使用OGNL表达式的三元运算符，应该通过增加一个指定的属性来改变分隔键和默认值的字符
        <property name="org.apache.ibatis.parsing.PropertyParser.default-value-separator" value="?:" />
        将默认的分隔符":"改为"?:"
    -->
    <properties resource="mybatis-config.properties">
        <property name="username" value="root" />
        <property name="password" value="" />
        <property name="org.apache.ibatis.parsing.PropertyParser.enable-default-value" value="true" />
        <property name="org.apache.ibatis.parsing.PropertyParser.default-value-separator" value="?:" />
    </properties>

    <!--
        settings是MyBatis中极为重要的调整设置，会改变MyBatis的运行时行为
        cacheEnabled	全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存。	true | false	true
        lazyLoadingEnabled	延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态。	true | false	false
        aggressiveLazyLoading	当开启时，任何方法的调用都会加载该对象的所有属性。否则，每个属性会按需加载（参考lazyLoadTriggerMethods).	true | false	false (true in ≤3.4.1)
        multipleResultSetsEnabled	是否允许单一语句返回多结果集（需要兼容驱动）。	true | false	true
        useColumnLabel	使用列标签代替列名。不同的驱动在这方面会有不同的表现， 具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。	true | false	true
        useGeneratedKeys	允许 JDBC 支持自动生成主键，需要驱动兼容。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 Derby）。	true | false	False
        autoMappingBehavior	指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 FULL 会自动映射任意复杂的结果集（无论是否嵌套）。	NONE, PARTIAL, FULL	PARTIAL
        autoMappingUnknownColumnBehavior	指定发现自动映射目标未知列（或者未知属性类型）的行为。
                                                                                                NONE: 不做任何反应
                                                                                                WARNING: 输出提醒日志 ('org.apache.ibatis.session.AutoMappingUnknownColumnBehavior' 的日志等级必须设置为 WARN)
                                                                                                FAILING: 映射失败 (抛出 SqlSessionException)
                                                                                                NONE, WARNING, FAILING	NONE
        defaultExecutorType	配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新。	SIMPLE REUSE BATCH	SIMPLE
        defaultStatementTimeout	设置超时时间，它决定驱动等待数据库响应的秒数。	任意正整数	Not Set (null)
        defaultFetchSize	为驱动的结果集获取数量（fetchSize）设置一个提示值。此参数只可以在查询设置中被覆盖。	任意正整数	Not Set (null)
        safeRowBoundsEnabled	允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为false。	true | false	False
        safeResultHandlerEnabled	允许在嵌套语句中使用分页（ResultHandler）。如果允许使用则设置为false。	true | false	True
        mapUnderscoreToCamelCase	是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。	true | false	False
        localCacheScope	MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。	SESSION | STATEMENT	SESSION
        jdbcTypeForNull	当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。	JdbcType 常量. 大多都为: NULL, VARCHAR and OTHER	OTHER
        lazyLoadTriggerMethods	指定哪个对象的方法触发一次延迟加载。	用逗号分隔的方法列表。	equals,clone,hashCode,toString
        defaultScriptingLanguage	指定动态 SQL 生成的默认语言。	一个类型别名或完全限定类名。	org.apache.ibatis.scripting.xmltags.XMLLanguageDriver
        defaultEnumTypeHandler	指定 Enum 使用的默认 TypeHandler 。 (从3.4.5开始)	一个类型别名或完全限定类名。	org.apache.ibatis.type.EnumTypeHandler
        callSettersOnNulls	指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这对于有 Map.keySet() 依赖或 null 值初始化的时候是有用的。注意基本类型（int、boolean等）是不能设置成 null 的。	true | false	false
        returnInstanceForEmptyRow	当返回行的所有列都是空时，MyBatis默认返回null。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集 (i.e. collectioin and association)。（从3.4.2开始）	true | false	false
        logPrefix	指定 MyBatis 增加到日志名称的前缀。	任何字符串	Not set
        logImpl	指定 MyBatis 所用日志的具体实现，未指定时将自动查找。	SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING	Not set
        proxyFactory	指定 Mybatis 创建具有延迟加载能力的对象所用到的代理工具。	CGLIB | JAVASSIST	JAVASSIST (MyBatis 3.3 or above)
        vfsImpl	指定VFS的实现	自定义VFS的实现的类全限定名，以逗号分隔。	Not set
        useActualParamName	允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的工程必须采用Java 8编译，并且加上-parameters选项。（从3.4.1开始）	true | false	true
        configurationFactory	指定一个提供Configuration实例的类。 这个被返回的Configuration实例用来加载被反序列化对象的懒加载属性值。 这个类必须包含一个签名方法static Configuration getConfiguration(). (从 3.2.3 版本开始)
    -->
    <settings>
        <setting name="cacheEnabled" value="true"/>
        <setting name="lazyLoadingEnabled" value="true"/>
        <setting name="multipleResultSetsEnabled" value="true"/>
        <setting name="useColumnLabel" value="true"/>
        <setting name="useGeneratedKeys" value="false"/>
        <setting name="autoMappingBehavior" value="PARTIAL"/>
        <setting name="autoMappingUnknownColumnBehavior" value="WARNING"/>
        <setting name="defaultExecutorType" value="SIMPLE"/>
        <setting name="defaultStatementTimeout" value="25"/>
        <setting name="defaultFetchSize" value="100"/>
        <setting name="safeRowBoundsEnabled" value="false"/>
        <setting name="mapUnderscoreToCamelCase" value="false"/>
        <setting name="localCacheScope" value="SESSION"/>
        <setting name="jdbcTypeForNull" value="OTHER"/>
        <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>
    </settings>

    <!--
        类型别名为Java类型设置一个短的名字。之和XML配置有关，存在的意义仅在于用来减少类的完全限定名的冗余
        这样设置时，Blog可以用在任何使用com.sun.health.flowable.entity.Blog的地方
        也可以指定一个包名，Mybatis会在包名下搜索需要的JavaBean
        每一个在包路径下的Java Bean，在没有注解的情况下，会使用Bean的首字母小写的非限定类名作为别名
        @Alias("alias_name") 为Java Bean指定别名
        一些常见的Java类型内建的相应的类型别名，都是大小写不敏感的，需要注意的是有基本类型名称重复导致的特殊处理
        别名      映射的类型
        _byte	    byte
        _long	    long
        _short	    short
        _int	    int
        _integer	int
        _double	    double
        _float	    float
        _boolean	boolean
        string	    String
        byte	    Byte
        long	    Long
        short	    Short
        int	        Integer
        integer	    Integer
        double	    Double
        float	    Float
        boolean	    Boolean
        date	    Date
        decimal	    BigDecimal
        bigdecimal	BigDecimal
        object	    Object
        map	        Map
        hashmap	    HashMap
        list	    List
        arraylist	ArrayList
        collection	Collection
        iterator	Iterator
    -->
    <typeAliases>
        <typeAlias type="com.sun.health.flowable.entity.Author" alias="Author" />
        <typeAlias type="com.sun.health.flowable.entity.Blog" alias="Blog" />
        <typeAlias type="com.sun.health.flowable.entity.Comment" alias="Comment" />
        <typeAlias type="com.sun.health.flowable.entity.Post" alias="Post" />
        <typeAlias type="com.sun.health.flowable.entity.Section" alias="Section" />
        <typeAlias type="com.sun.health.flowable.entity.Tag" alias="Tag" />
        <package name="com.sun.health.flowable.entity" />
    </typeAliases>

    <!--
        无论是Mybatis在预处理语句(PreparedStatement)中设置一个参数时，还是从结果集中取出一个值时，都会用类型处理器将获取的值以合适的方式转换成Java类型。以下是一些默认的类型处理器。
        类型处理器	                    Java 类型	                JDBC 类型
        BooleanTypeHandler	            java.lang.Boolean, boolean	数据库兼容的 BOOLEAN
        ByteTypeHandler	                java.lang.Byte, byte	    数据库兼容的 NUMERIC 或 BYTE
        ShortTypeHandler	            java.lang.Short, short	    数据库兼容的 NUMERIC 或 SHORT INTEGER
        IntegerTypeHandler	            java.lang.Integer, int	    数据库兼容的 NUMERIC 或 INTEGER
        LongTypeHandler	                java.lang.Long, long	    数据库兼容的 NUMERIC 或 LONG INTEGER
        FloatTypeHandler	            java.lang.Float, float	    数据库兼容的 NUMERIC 或 FLOAT
        DoubleTypeHandler	            java.lang.Double, double	数据库兼容的 NUMERIC 或 DOUBLE
        BigDecimalTypeHandler	        java.math.BigDecimal	    数据库兼容的 NUMERIC 或 DECIMAL
        StringTypeHandler	            java.lang.String	        CHAR, VARCHAR
        ClobReaderTypeHandler	        java.io.Reader	            -
        ClobTypeHandler	                java.lang.String	        CLOB, LONGVARCHAR
        NStringTypeHandler	            java.lang.String	        NVARCHAR, NCHAR
        NClobTypeHandler	            java.lang.String	        NCLOB
        BlobInputStreamTypeHandler	    java.io.InputStream	        -
        ByteArrayTypeHandler	        byte[]	                    数据库兼容的字节流类型
        BlobTypeHandler             	byte[]	                    BLOB, LONGVARBINARY
        DateTypeHandler	                java.util.Date	            TIMESTAMP
        DateOnlyTypeHandler	            java.util.Date	            DATE
        TimeOnlyTypeHandler	            java.util.Date	            TIME
        SqlTimestampTypeHandler	        java.sql.Timestamp	        TIMESTAMP
        SqlDateTypeHandler	            java.sql.Date	            DATE
        SqlTimeTypeHandler	            java.sql.Time	            TIME
        ObjectTypeHandler	            Any	                        OTHER 或未指定类型
        EnumTypeHandler	                Enumeration Type	        VARCHAR-任何兼容的字符串类型，存储枚举的名称（而不是索引）
        EnumOrdinalTypeHandler	        Enumeration Type	        任何兼容的 NUMERIC 或 DOUBLE 类型，存储枚举的索引（而不是名称）。
        InstantTypeHandler	            java.time.Instant	        TIMESTAMP
        LocalDateTimeTypeHandler	    java.time.LocalDateTime	    TIMESTAMP
        LocalDateTypeHandler	        java.time.LocalDate	        DATE
        LocalTimeTypeHandler	        java.time.LocalTime	        TIME
        OffsetDateTimeTypeHandler	    java.time.OffsetDateTime	TIMESTAMP
        OffsetTimeTypeHandler	        java.time.OffsetTime	    TIME
        ZonedDateTimeTypeHandler	    java.time.ZonedDateTime	    TIMESTAMP
        YearTypeHandler	                java.time.Year	            INTEGER
        MonthTypeHandler	            java.time.Month	            INTEGER
        YearMonthTypeHandler	        java.time.YearMonth	        VARCHAR or LONGVARCHAR
        JapaneseDateTypeHandler	        java.time.chrono.JapaneseDate	DATE

        也可以重写类型处理器或创建自定义的类型处理器来处理不支持的或非标准的类型。
        具体做法是：实现org.apache.ibatis.type.TypeHandler接口，或者继承一个便利的类org.apache.ibatis.type.BaseTypeHandler，然后可以选择性的将它映射到一个JDBC类型

        @MappedJdbcTypes(JdbcType.VARCHAR) // 映射Jdbc类型，在使用这种Jdbc类型时使用处理器处理
        class CustomTypeHandler implements TypeHandler<String>/extends BaseTypeHandler<String> // 实现TypeHandler或继承BaseTypeHandler 泛型指定返回的Java类型

        使用类型处理器会覆盖已存在的处理Java的String类型和VARCHAR参数及结果的类型处理器。要注意MyBatis不会窥探数据库元信息来决定使用哪种处理器。必须在参数和结果映射中指明VARCHAR类型的字段，以使其能够绑定到正确的类型处理器上。这是因为：Mybatis知道语句被执行才清楚数据类型。
        通过类型处理器的泛型，MyBatis可以得知该类型处理器处理的Java类型，不过可以通过两种方式改变：
        1.在类型处理器的配置元素上增加一个javaType属性
        2.在类型处理器的类上添加@MappedTypes注解指定关联的Java类型列表。优先级较低
        同样，两种方式指定被关联的JDBC类型：
        1.在类型处理器的配置元素上增加一个jdbcType属性
        2.在类型处理器的类上添加@MappedJdbcTypes注解指定关联的Jdbc类型列表。优先级较低

        当决定在ResultMap中使用某一个TypeHandler时，此时Java类型是已知的，但是JDBC类型是位置的。因此MyBatis使用javaType=[TheJavaType],jdbcType=null的组合来选择一个TypeHandler。这意味着使用@MappedJdbcType注解可以限制处理器范围，同时除非显式设置，否则TypeHandler在ResultMap中是无效的。如果希望在ResultMap中使用处理器，需要将@MappedJdbcTypes的includeNullJdbcType=true即可。从3.4.0开始，如果只有一个注册的TypeHandler来处理Java类型，那么它将是ResultMap使用Java类型时的默认值（即使没有includeNullJdbcType）

        可以让MyBatis查找类型处理器
        <package name="" />

        可以创建一个能够处理多个类的泛型类型处理器。为了使用泛型类型处理器，需要增加一个接受该类的class作为参数的构造器，这样构造一个类型处理器时MyBatis会传入一个具体的类
        public class CustomTypeHandler<E extends MyObject> extends BaseTypeHandler<E> {

            private Class<E> type;

            public CustomTypeHandler(Class<E> type) {
                if(type == null) {
                    throw new IllegalArgumentException("Type argument cannot be null");
                }
                this.type = type;
            }

        }


        处理枚举类型
        想映射枚举类型Enum，则需要从EnumTypeHandler或EnumOrdinalTypeHandler中选一个使用
        EnumTypeHandler在某种意义上比较特别，其他的处理器只针对某个特定的类，而它会处理任意继承自Enum的类。
        EnumTypeHandler会把值转换成对应的名字
        自动映射器会自动选用EnumOrdinalTypeHandler，使用EnumTypeHandler需要显式指定
    -->
    <typeHandlers>
        <!--<typeHandler handler="" javaType="" jdbcType="" />-->
        <!--<typeHandler handler="com.sun.health.flowable.type.CustomTypeHandlerA" />-->
        <!--<typeHandler handler="com.sun.health.flowable.type.CustomTypeHandlerB" />-->
        <!--<package name="com.sun.health.flowable.type" />-->
    </typeHandlers>

    <!--
        MyBatis每次创建结果对象的新实例时，都会使用对象工厂（ObjectFactory）实例来完成。默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认构造方法，要么在参数映射存在的时候通过参数构造方法来实例化。如果想要覆盖默认行为，需要实现自定义的对象工厂。
        ObjectFactory接口很简单，包含两个用于创建的方法，一个处理默认构造方法，一个处理带参数的构造方法。最后，setProperties方法可以用来配置ObjectFactory，在初始化ObjectFactory实例后，objectFa元素体中定义的属性会被床底给setProperties方法。
    -->
    <!--<objectFactory type="com.sun.health.flowable.ofactory.CustomObjectFactory" >-->
        <!--<property name="somProperty" value="None" />-->
    <!--</objectFactory>-->

    <!--
        插件
        MyBatis允许在已映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis允使用插件来拦截的方法调用：
        1.Executor(update、query、flushStatements、commit、rollback、getTransaction。close、isClosed)
        2.ParameterHandler（getParameterObject、setParameters）
        3.ResultSetHandler（handleResultSets、handleOutputParameters）
        4.StatementHandler（prepare、parameterize、batch、update、query）
        这些类中方法的细节可以通过查看每个方法签名来发现，或者直接查看源码。若不仅仅想监控，最好了解要重写方法的行为。使用插件时要特别当心。
        使用插件非常简单，只要实现Interceptor接口，并指定想要拦截的方法签名即可。
        @Interceptors({
            @Signature(
                type = Executor.class,
                method = "update",
                args = {MappedStatement.class, Object.class}
            )
        })
        覆盖配置类
        除了用插件之外，也可以通过完全覆盖配置类来达到目的。
    -->
    <plugins>
        <plugin interceptor="com.sun.health.flowable.plugin.CustomPlugin">
            <property name="someProperty" value="None" />
        </plugin>
    </plugins>

    <!--
        配置环境
        MyBatis可以配置成适应多种环境，这种机制有助于将SQL映射应用于多种数据库之中，现实情况下有多种理由需要这么做。
        谨记：虽然可以配置U盾讴歌环境，每个SqlSessionFactory实例只能选择其中之一。
        所以，如果想连接多个数据库，需要配置多个SqlSessionFactory，一对一。

        关键点：
        1.默认的环境ID
        2.每个environment元素定义的环境ID
        3.事务管理器的配置
        4.数据源的配置

        事务管理器：
        MyBatis中有两种事务管理器（JDBC|MANAGED）
        1.JDBC 直接使用JDBC的提交和回滚设置，依赖于从数据源得到的连接来管理实务作用域
        2.MANAGED 几乎没做什么。从来不提交或回滚一个连接，而是让容器来管理实务的整个生命周期。默认情况下会自动关闭连接，因此需要将closeConnection属性设置为false来阻止默认行为

        如果使用Spring+MyBatis，则无需配置事务管理器，Spring会使用自带的管理器来覆盖前面的配置

        这两种事务管理器都不需要任何属性，只是类型别名，可以使用TransactionFactory接口的实现类的完全限定名或类型别名来替代。
        public interface TransactionFactory {
            void setProperties(Properties props);
            Transaction newTransaction(Connection conn);
            Transaction newTransaction(DataSource dataSource, TransactionIsolationLevel level, boolean autoCommit);
        }
        值需要创建一个Transaction接口的实例
        public interface Transaction {
            Connection getConnection() throws SQLException;
            void commit() throws SQLException;
            void rollback() throws SQLException;
            void close() throws SQLException;
            Integer getTimeout() throws SQLException;
        }

        数据源
        dataSource元素使用标准的JDBC数据源接口来配置JDBC连接对象的资源
        有三种内建的数据源类型
        type="UNPOOLED|POOLED|JNDI"
        UNPOOLED 这个数据源的实现只是每次被请求时打开和关闭连接。
        1.driver
        2.url
        3.username
        4.password
        5.defaultTransactionIsolationLevel 默认的连接事务隔离级别
        POOLED 利用连接池，避免创建新的连接实例所需的初始化和认证时间
        除了UNPOOLED属性
        1.poolMaximumActiveConnections 最大活动连接数 默认10
        2.poolMaximumIdleConnections 最大空闲连接数
        3.poolMaximumCheckoutTime 在被强制返回之前，池中连接被检出时间 默认20000毫秒
        4.poolTImeToWait 获取连接花费较长时间，会打印日志并重新尝试获取连接 默认20000毫秒
        5.poolMaximumLocalBadConnectionTolerance 坏连接数 默认3
        6.poolPingQuery 发送到数据库的政策查询，用于检查
        7.poolPingEnabled 是否启动侦测查询 默认false
        8.poolPingConnectionNotUsedFor poolPingQuery的频率
        JNDI 为了能在EJB或应用服务器这类容器中使用，容器可以集中活在外部配置数据源，然后放置一个JNDI上下文的引用。
        1.initial_context
        2.data_source
    -->
    <environments default="dev">
        <environment id="dev">
            <transactionManager type="JDBC">
                <!--<property name="" value="" />-->
            </transactionManager>
            <dataSource type="POOLED">
                <property name="url" value="${url}" />
                <property name="driver" value="${driver}" />
                <property name="username" value="${username}" />
                <property name="password" value="${password}" />
            </dataSource>
        </environment>
    </environments>

    <!--
        MyBatis可以根据不同的数据库厂商执行不同的语句，是基于映射语句中的databaseId属性。MyBatis 会加载不带 databaseId 属性和带有匹配当前数据库 databaseId 属性的所有语句。如果同时找到带有 databaseId 和不带 databaseId 的相同语句，则后者会被舍弃。 为支持多厂商特性只要像下面这样在 mybatis-config.xml 文件中加入 databaseIdProvider 即可：
        这里的 DB_VENDOR 会通过 DatabaseMetaData#getDatabaseProductName() 返回的字符串进行设置。 由于通常情况下这个字符串都非常长而且相同产品的不同版本会返回不同的值，所以最好通过设置属性别名来使其变短，如下：
        在提供了属性别名时，DB_VENDOR databaseIdProvider 将被设置为第一个能匹配数据库产品名称的属性键对应的值，如果没有匹配的属性将会设置为 “null”。 在这个例子中，如果 getDatabaseProductName() 返回“Oracle (DataDirect)”，databaseId 将被设置为“oracle”。

        你可以通过实现接口 org.apache.ibatis.mapping.DatabaseIdProvider 并在 mybatis-config.xml 中注册来构建自己的 DatabaseIdProvider：
    -->
    <databaseIdProvider type="DB_VENDOR">
        <property name="SQL Server" value="sqlserver" />
        <property name="DB2" value="db2" />
        <property name="Oracle" value="oracle" />
    </databaseIdProvider>

    <!--
        映射器
        定义SQL映射语句，需要告诉寻址路径
        1.相对于类路径的资源引用
        2.完全限定资源定位符（包括file:///)
        3.类名和包名
    -->
    <mappers>

    </mappers>
</configuration>