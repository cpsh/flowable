<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    SQL映射文件有很少几个顶级元素
    cache           给定命名空间的缓存配置
    cache-ref       其他命名空间缓存配置的引用
    resultMap       描述如何从数据库结果集中加载对象
    sql             可悲其他语句引用的可重用语句块
    insert          映射插入语句
    update          映射更新语句
    select          映射查询语句
    delete          映射删除语句
-->
<mapper>


    <!--
        参数(Parameters)
        非常简单的命名参数映射
        parameterType="int"
        #{id}
        parameterType="...User"
        #{id},#{name}
        复杂对象则会查找属性再传入
        格式
        #{
            property,
            mode=IN|OUT|INOUT,      参数为OUT或INOUT，参数对象属性的真实值将会被改变，就像获取输出参数时所期望的。如果mode为OUT，而且jdbcType为CURSOR，必须制定一个resultMap来映射结果集ResultMap到参数类型
            resultMap=,
            javaType=,
            jdbcType=,
            typeHandler=,
            numericScale=,          小数点后保留的位数
        }
        虽然参数选项很强大，但大多数情况只需要指定参数名，最多指定jdbcType，其他的事情交给MyBatis推断

        字符串体寒
        默认情况下，使用#{}格式的语法会导致MyBatis创建PreparedStatement参数并安全设置。这样安全、迅速，通常也是首选。不过想要在SQL中插入一个不转义的字符串，比如像ORDER BY
        ORDER BY ${}
        不推荐


    -->


    <!--
        resultMap
            resultType是复杂对象时，MyBatis会自动创建一个ResultMap，在基于属性名来映射列到JavaBean属性上。如果列名和属性名没有精确匹配，可以使用别名
        高级结果映射
            标签
            1.constructor 用于在实例化类时，注入结果到构造方法中
                a.idArg ID参数，标记处作为ID的结果可以帮助提高整体性能
                b.arg 将被注入到构造方法的一个普通结果
            2.id 一个ID结果 标记处作为ID的结果可以帮助提高整体性能
            3.result 注入到字段或JavaBean属性的普通结果
            4.association 一个复杂类型的关联
                嵌套结果映射 关联可以指定为一个resultMap元素，或者引用一个
            5.collection 一个复杂类型的集合
                嵌套结果映射 集合可以指定为一个resultMap元素，或者引用一个
            6.discriminator  使用结果值判断使用哪个resultMap
                case 基于某些值的结果映射
                    嵌套结果映射 – 一个 case 也是一个映射它本身的结果,因此可以包含很多相 同的元素，或者它可以参照一个外部的 resultMap。

        属性	        描述
        id	        当前命名空间中的一个唯一标识，用于标识一个result map.
        type	    类的完全限定名, 或者一个类型别名 (内置的别名可以参考上面的表格).
        autoMapping	如果设置这个属性，MyBatis将会为这个ResultMap开启或者关闭自动映射。这个属性会覆盖全局的属性 autoMappingBehavior。默认值为：unset。

        id&result
        属性	        描述
        property	映射到列结果的字段或属性。如果用来匹配的 JavaBeans 存在给定名字的属性，那么它将会被使用。否则 MyBatis 将会寻找给定名称 property 的字段。 无论是哪一种情形，你都可以使用通常的点式分隔形式进行复杂属性导航。比如,你可以这样映射一些简单的东西: “username” ,或者映射到一些复杂的东西: “address.street.number” 。
        column	    数据库中的列名,或者是列的别名。一般情况下，这和 传递给 resultSet.getString(columnName) 方法的参数一样。
        javaType	一个 Java 类的完全限定名,或一个类型别名(参考上面内建类型别名 的列表) 。如果你映射到一个 JavaBean,MyBatis 通常可以断定类型。 然而,如果你映射到的是 HashMap,那么你应该明确地指定 javaType 来保证期望的行为。
        jdbcType	JDBC 类型，所支持的 JDBC 类型参见这个表格之后的“支持的 JDBC 类型”。 只需要在可能执行插入、更新和删除的允许空值的列上指定 JDBC 类型。这是 JDBC 的要求而非 MyBatis 的要求。如果你直接面向 JDBC 编程,你需要对可能为 null 的值指定这个类型。
        typeHandler	我们在前面讨论过的默认类型处理器。使用这个属性,你可以覆盖默 认的类型处理器。这个属性值是一个类型处理 器实现类的完全限定名，或者是类型别名。

        支持的 JDBC 类型

        为了未来的参考,MyBatis 通过包含的 jdbcType 枚举型,支持下面的 JDBC 类型。

        BIT	FLOAT	CHAR	TIMESTAMP	OTHER	UNDEFINED
        TINYINT	REAL	VARCHAR	BINARY	BLOB	NVARCHAR
        SMALLINT	DOUBLE	LONGVARCHAR	VARBINARY	CLOB	NCHAR
        INTEGER	NUMERIC	DATE	LONGVARBINARY	BOOLEAN	NCLOB
        BIGINT	DECIMAL	TIME	NULL	CURSOR	ARRAY

        构造方法
        当处理一个带有多个形参的构造方法时，很容易在保证arg元素的正确顺序上出错，3.4.3版本开始，可以在指定参数名的前提下任意顺序编写arg元素

        属性	描述
        column	    数据库中的列名,或者是列的别名。一般情况下，这和 传递给 resultSet.getString(columnName) 方法的参数一样。
        javaType	一个 Java 类的完全限定名,或一个类型别名(参考上面内建类型别名的列表)。 如果你映射到一个 JavaBean,MyBatis 通常可以断定类型。然而,如 果你映射到的是 HashMap,那么你应该明确地指定 javaType 来保证期望的 行为。
        jdbcType	JDBC 类型，所支持的 JDBC 类型参见这个表格之前的“支持的 JDBC 类型”。 只需要在可能执行插入、更新和删除的允许空值的列上指定 JDBC 类型。这是 JDBC 的要求而非 MyBatis 的要求。如果你直接面向 JDBC 编程,你需要对可能为 null 的值指定这个类型。
        typeHandler	我们在前面讨论过的默认类型处理器。使用这个属性,你可以覆盖默 认的类型处理器。这个属性值是一个类型处理 器实现类的完全限定名，或者是类型别名。
        select	    用于加载复杂类型属性的映射语句的 ID,它会从 column 属性中指定的列检索数据，作为参数传递给此 select 语句。具体请参考 Association 标签。
        resultMap	ResultMap 的 ID，可以将嵌套的结果集映射到一个合适的对象树中，功能和 select 属性相似，它可以实现将多表连接操作的结果映射成一个单一的ResultSet。这样的ResultSet将会将包含重复或部分数据重复的结果集正确的映射到嵌套的对象树中。为了实现它, MyBatis允许你 “串联” ResultMap,以便解决嵌套结果集的问题。想了解更多内容，请参考下面的Association元素。
        name	    构造方法形参的名字。从3.4.3版本开始，通过指定具体的名字，你可以以任意顺序写入arg元素。参看上面的解释。

        关联
        1.嵌套查询，通过执行另外一个SQL映射语句返回预期的复杂类型
        2.嵌套结果，处理重复的联合结果的子集
        属性	        描述
        property	映射到列结果的字段或属性。如果用来匹配的 JavaBeans 存在给定名字的属性，那么它将会被使用。 否则 MyBatis 将会寻找与给定名称相同的字段。 这两种情形你可以使用通常点式的复杂属性导航。比如,你可以这样映射 一 些 东 西 :“ username ”, 或 者 映 射 到 一 些 复 杂 的 东 西 : “address.street.number” 。
        javaType	一个 Java 类的完全限定名,或一个类型别名(参考上面内建类型别名的列 表) 。如果你映射到一个 JavaBean,MyBatis 通常可以断定类型。然而,如 javaType 果你映射到的是 HashMap,那么你应该明确地指定 javaType 来保证所需的 行为。
        jdbcType	在这个表格之前的所支持的 JDBC 类型列表中的类型。JDBC 类型是仅仅 需要对插入, 更新和删除操作可能为空的列进行处理。这是 JDBC 的需要, jdbcType 而不是 MyBatis 的。如果你直接使用 JDBC 编程,你需要指定这个类型-但 仅仅对可能为空的值。
        typeHandler	我们在前面讨论过默认的类型处理器。使用这个属性,你可以覆盖默认的 typeHandler 类型处理器。 这个属性值是类的完全限定名或者是一个类型处理器的实现, 或者是类型别名。

        嵌套查询
        属性	        描述
        column	    来自数据库的列名,或重命名的列标签。这和通常传递给 resultSet.getString(columnName)方法的字符串是相同的。 column 注 意 : 要 处 理 复 合 主 键 , 你 可 以 指 定 多 个 列 名 通 过 column= ” {prop1=col1,prop2=col2} ” 这种语法来传递给嵌套查询语 句。这会引起 prop1 和 prop2 以参数对象形式来设置给目标嵌套查询语句。
        select	    另外一个映射语句的 ID,可以加载这个属性映射需要的复杂类型。获取的 在列属性中指定的列的值将被传递给目标 select 语句作为参数。表格后面 有一个详细的示例。 select 注 意 : 要 处 理 复 合 主 键 , 你 可 以 指 定 多 个 列 名 通 过 column= ” {prop1=col1,prop2=col2} ” 这种语法来传递给嵌套查询语 句。这会引起 prop1 和 prop2 以参数对象形式来设置给目标嵌套查询语句。
        fetchType	可选的。有效值为 lazy和eager。 如果使用了，它将取代全局配置参数lazyLoadingEnabled


        关联的嵌套结果

        属性	            描述
        resultMap	    这是结果映射的 ID,可以映射关联的嵌套结果到一个合适的对象图中。这 是一种替代方法来调用另外一个查询语句。这允许你联合多个表来合成到 resultMap 一个单独的结果集。这样的结果集可能包含重复,数据的重复组需要被分 解,合理映射到一个嵌套的对象图。为了使它变得容易,MyBatis 让你“链 接”结果映射,来处理嵌套结果。一个例子会很容易来仿照,这个表格后 面也有一个示例。
        columnPrefix	当连接多表时，你将不得不使用列别名来避免ResultSet中的重复列名。指定columnPrefix允许你映射列名到一个外部的结果集中。 请看后面的例子。
        notNullColumn	默认情况下，子对象仅在至少一个列映射到其属性非空时才创建。 通过对这个属性指定非空的列将改变默认行为，这样做之后Mybatis将仅在这些列非空时才创建一个子对象。 可以指定多个列名，使用逗号分隔。默认值：未设置(unset)。
        autoMapping 	如果使用了，当映射结果到当前属性时，Mybatis将启用或者禁用自动映射。 该属性覆盖全局的自动映射行为。 注意它对外部结果集无影响，所以在select or resultMap属性中这个是毫无意义的。 默认值：未设置(unset)。


        集合
        集合元素的作用集合和关联是相同的，将javaType变为ofType基本相同

        鉴别器 discriminator
        单独的数据库查询也许返回很多不同（但有些关联）数据类型的结果集。鉴别其元素就是被设计来处理这种情况的，还有包括类的继承层次结构。类似于Java中的switch语句

        定义鉴别器指定了column和javaType属性。列是MyBatis查找比较值的地方，javaType是需要被用来保证等价测试的合适类型（通常字符串）
        例如
        <discrimination column="id" javaType="int">
            <case value="1" resultMap="A" />
            <case value="2" resultMap="B" />
            <case value="3" resultMap="C" />
        </discrimination>

        自动映射
        在简单场景下，MyBatis可以自动映射查询结果。复杂场景则需要构建ResultMap，也可以混用两种策略。
        当自动映射查询结果时，MyBatis会获取sql返回的列名并在Java类中查找相同名字的属性（忽略大小写）。这意味这如果MyBatis发现了ID列和id属性，将会赋值
        通常数据库列使用大写单词命名，单词间用下划线分割，而java一般遵循驼峰命名法。为了在两种命名方式之间启动自动映射，需要将mapUnderscoreToCamelCase设置为true
        自动映射甚至在特定的resultMap下也能工作，如果没有被手工映射，则将被自动映射。自动映射完毕后手动映射才会被处理。
        有三种自动映射等级：
        1.NONE 禁用自动映射。仅设置手动映射属性
        2.PARTIAL 将自动映射结果除了那些有内部定义内嵌结果映射的（joins） 默认
        3.FULL 自动映射所有

        autoMapping属性可以忽略自动映射等级配置
    -->
    <resultMap id="userResultMap" type="User">
        <id property="id" column="user_id"></id>
        <result property="name" column="user_name"></result>
        <result property="password" column="hashed_password"></result>
    </resultMap>

    <resultMap id="detailedBlogResultMap" type="Blog">
        <constructor>
            <idArg column="blog_id" javaType="int"/>
        </constructor>
        <result property="title" column="blog_title"/>
        <association property="author" javaType="Author">
            <id property="id" column="author_id"/>
            <result property="username" column="author_username"/>
            <result property="password" column="author_password"/>
            <result property="email" column="author_email"/>
            <result property="bio" column="author_bio"/>
            <result property="favouriteSection" column="author_favourite_section"/>
        </association>
        <collection property="posts" ofType="Post">
            <id property="id" column="post_id"/>
            <result property="subject" column="post_subject"/>
            <association property="author" javaType="Author"/>
            <collection property="comments" ofType="Comment">
                <id property="id" column="comment_id"/>
            </collection>
            <collection property="tags" ofType="Tag" >
                <id property="id" column="tag_id"/>
            </collection>
            <discriminator javaType="int" column="draft">
                <case value="1" resultType="DraftPost"/>
            </discriminator>
        </collection>
    </resultMap>


    <resultMap id="" >
        <constructor>
            <idArg column="" javaType="" name="" />
            <arg column="" javaType="" name="" />
         </constructor>
        <id column="" property="" />
        <result column="" property="" />
        <association property="" column="" javaType="" select="">
        </association>
        <association property="" column="" resultMap=""></association>
        <association property="" column="" resultMap="" columnPrefix=""></association>
        <association property="" column="" type="">
            <id></id>
            ,<result></result>
        </association>
    </resultMap>

    <select id="" >

    </select>

    <select id="" >

    </select>

    <!--
        可以被用来定义可重用的SQL代码段，可以包含在其他语句中，它可以被静态参数化，不同属性通过包含的实例变化
        属性值也可以被用在include的refid属性中
    -->
    <sql id="userColumns">${alias}.id,${alias}.username,${alias}.password</sql>
    <select id="selectUsers" resultType="map">
        SELECT
          <include refid="userColumns">
              <property name="alias" value="t1" />
          </include>
        <include refid="userColumns">
            <property name="alias" value="t2" />
        </include>
        FROM some_table t1
        CROSS JOIN some_table t2
    </select>

    <sql id="sometable">
        ${prefix}table
    </sql>

    <sql id="someinclude">
        FROM
          <include refid="${include_target}">
          </include>
    </sql>

    <select id="someselect">
        SELECT *
          <include refid="someinclude">
              <property name="include_target" value="sometable" />
              <property name="prefix" value="some" />
          </include>
    </select>

    <!--
        #{id}创建一个预处理语句参数
        和JDBC方法
        String selectAuthor = "SELECT * FROM author WHERE id = ?";
        PreparedStatement ps = conn.preparedStatement(selectAuthor);
        ps.setInt(1, id);

        <select
            id=""
            parameterType=""
            resultType=""
            resultMap=""
            flushCache=""
            useCache=""
            timeout=""
            fetchSize=""
            statementType=""
            resultSetType=""
        >
        </select>
        属性              	描述
        id	                在命名空间中唯一的标识符，可以被用来引用这条语句。
        parameterType	    将会传入这条语句的参数类的完全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过 TypeHandler 推断出具体传入语句的参数，默认值为 unset。
        parameterMap	    这是引用外部 parameterMap 的已经被废弃的方法。使用内联参数映射和 parameterType 属性。
        resultType      	从这条语句中返回的期望类型的类的完全限定名或别名。注意如果是集合情形，那应该是集合可以包含的类型，而不能是集合本身。使用 resultType 或 resultMap，但不能同时使用。
        resultMap	        外部 resultMap 的命名引用。结果集的映射是 MyBatis 最强大的特性，对其有一个很好的理解的话，许多复杂映射的情形都能迎刃而解。使用 resultMap 或 resultType，但不能同时使用。
        flushCache	        将其设置为 true，任何时候只要语句被调用，都会导致本地缓存和二级缓存都会被清空，默认值：false。
        useCache	        将其设置为 true，将会导致本条语句的结果被二级缓存，默认值：对 select 元素为 true。
        timeout	            这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为 unset（依赖驱动）。
        fetchSize	        这是尝试影响驱动程序每次批量返回的结果行数和这个设置值相等。默认值为 unset（依赖驱动）。
        statementType	    STATEMENT，PREPARED 或 CALLABLE 的一个。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。
        resultSetType	    FORWARD_ONLY，SCROLL_SENSITIVE 或 SCROLL_INSENSITIVE 中的一个，默认值为 unset （依赖驱动）。
        databaseId	        如果配置了 databaseIdProvider，MyBatis 会加载所有的不带 databaseId 或匹配当前 databaseId 的语句；如果带或者不带的语句都有，则不带的会被忽略。
        resultOrdered	    这个设置仅针对嵌套结果 select 语句适用：如果为 true，就是假设包含了嵌套结果集或是分组了，这样的话当返回一个主结果行的时候，就不会发生有对前面结果集的引用的情况。这就使得在获取嵌套的结果集的时候不至于导致内存不够用。默认值：false。
        resultSets	        这个设置仅对多结果集的情况适用，它将列出语句执行后返回的结果集并每个结果集给一个名称，名称是逗号分隔的。
    -->
    <select id="selectAuthor" parameterType="int" resultType="hashmap">
        SELECT * FROM author WHERE id = #{id}
    </select>

    <!--
        <insert
            id=""
            parameterType=""
            flushCache=""
            statementType=""
            keyProperty=""
            keyColumn=""
            useGeneratedKeys=""
            timeout=""
            >
        </insert>
        <update
            id=""
            parameterType=""
            flushCache=""
            statementType=""
            timeout=""
        >
        </update>
        <delete
            id=""
            parameterType=""
            flushCache=""
            statementType=""
            timeout=""
        >
        </delete>
        属性              	描述
        id	                命名空间中的唯一标识符，可被用来代表这条语句。
        parameterType	    将要传入语句的参数的完全限定类名或别名。这个属性是可选的，因为 MyBatis 可以通过 TypeHandler 推断出具体传入语句的参数，默认值为 unset。
        parameterMap	    这是引用外部 parameterMap 的已经被废弃的方法。使用内联参数映射和 parameterType 属性。
        flushCache	        将其设置为 true，任何时候只要语句被调用，都会导致本地缓存和二级缓存都会被清空，默认值：true（对应插入、更新和删除语句）。
        timeout	            这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为 unset（依赖驱动）。
        statementType	    STATEMENT，PREPARED 或 CALLABLE 的一个。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。
        useGeneratedKeys	（仅对 insert 和 update 有用）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系数据库管理系统的自动递增字段），默认值：false。
        keyProperty	        （仅对 insert 和 update 有用）唯一标记一个属性，MyBatis 会通过 getGeneratedKeys 的返回值或者通过 insert 语句的 selectKey 子元素设置它的键值，默认：unset。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。
        keyColumn	        （仅对 insert 和 update 有用）通过生成的键值设置表中的列名，这个设置仅在某些数据库（像 PostgreSQL）是必须的，当主键列不是表中的第一列的时候需要设置。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。
        databaseId	        如果配置了 databaseIdProvider，MyBatis 会加载所有的不带 databaseId 或匹配当前 databaseId 的语句；如果带或者不带的语句都有，则不带的会被忽略。

        插入的语句的配置负责更加丰富，在插入语句里面有一些额外的属性和子元素用来处理主键的生成，而且有多种生成方式。
        首先，如果数据支持自动生成主键的字段（如MySQL和SQLServer），设置useGeneratedKeys="true" 然后再把keyProperty设置到目标属性上即可。
        支持多行插入，也可以传入一个Author数组或集合，并返回自动生成的主键

        对于不支持自动生成类型的数据库，使用另一种方法来生成主键。
        (Oracle生成自增队列
            CREATE SEQUENCE SEQ_NAME
            MINVALUE 1
            MAXVALUE 1000000
            START WITH 1
            INCREMENT BY 1
            NOCACHE;)
        <insert>
            <selectKey>
            </selectKey>
        </insert>
        selectKey中的语句首先被执行，结果被设置到对应的property中，用于INSERT语句
        <selectKey
            keyProperty=""
            keyColumn=""
            order=""
            resultType=""
            statementType=""
        >
        </selectKey>
        属性	            描述
        keyProperty	    selectKey 语句结果应该被设置的目标属性。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。
        keyColumn	    匹配属性的返回结果集中的列名称。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。
        resultType	    结果的类型。MyBatis 通常可以推算出来，但是为了更加确定写上也不会有什么问题。MyBatis 允许任何简单类型用作主键的类型，包括字符串。如果希望作用于多个生成的列，则可以使用一个包含期望属性的 Object 或一个 Map。
        order	        这可以被设置为 BEFORE 或 AFTER。如果设置为 BEFORE，那么它会首先选择主键，设置 keyProperty 然后执行插入语句。如果设置为 AFTER，那么先执行插入语句，然后是 selectKey 元素 - 这和像 Oracle 的数据库相似，在插入语句内部可能有嵌入索引调用。
        statementType	与前面相同，MyBatis 支持 STATEMENT，PREPARED 和 CALLABLE 语句的映射类型，分别代表 PreparedStatement 和 CallableStatement 类型。
    -->
    <insert id="insertAuthor" useGeneratedKeys="true" keyProperty="id">
        INSERT  INTO author VALUES (null, #{name});
    </insert>

    <insert id="insertAuthorSeq">
        <selectKey keyProperty="id" resultType="int">
            SELECT CUS_SEQUENCE.NEXTVAL FROM DUAL;
        </selectKey>
        INSERT INTO author VALUES (#{id}, #{name});
    </insert>

    <update id="">

    </update>

    <delete id="">

    </delete>




</mapper>